{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,A,E,kD,iB,C,GCCA,IACM,EADF,GACE,EAAa,AAAoB,aAApB,OAAO,UAA4B,SAAS,aAAa,CAAG,SAAS,aAAa,CAAC,GAAG,CAAG,KAAA,EAG5G,SAAS,EAAY,CAAC,CAAC,EAEyC,AAArD,EAA4D,KAAQ,CAAC,IAAI,QAAQ,CAAC,EAAQ,KAAU,EAAoB,EAAQ,EAAmB,CAAM,GAAG,IAA9I,EAAoB,EAA8d,EAAM,EAAU,EAAkxC,EAAiM,EAA0G,EAAM,EAAO,EAAO,EAAQ,EAAO,EAAQ,EAAQ,EAAwtE,EAAutE,EAAe,EAAisD,EAAotI,EAAqI,EAA+pF,EAAi8V,EAAs5C,EAAq7mF,EAApn9G,EAAsr1B,EAAc,EAAiB,EAAp81B,EAAgB,OAAO,MAAM,CAAC,CAAC,EAA/L,GAA+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","sources":["<anon>","node_modules/@splinetool/runtime/build/process.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"3YvIH\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar Module = (()=>{\n    var _scriptDir = typeof document !== \"undefined\" && document.currentScript ? document.currentScript.src : undefined;\n    return function(moduleArg = {}) {\n        var Module = moduleArg;\n        var readyPromiseResolve, readyPromiseReject;\n        Module[\"ready\"] = new Promise((resolve, reject)=>{\n            readyPromiseResolve = resolve;\n            readyPromiseReject = reject;\n        });\n        var moduleOverrides = Object.assign({}, Module);\n        var arguments_ = [];\n        var thisProgram = \"./this.program\";\n        var quit_ = (status, toThrow)=>{\n            throw toThrow;\n        };\n        var ENVIRONMENT_IS_WEB = true;\n        var ENVIRONMENT_IS_WORKER = false;\n        var scriptDirectory = \"\";\n        function locateFile(path) {\n            if (Module[\"locateFile\"]) return Module[\"locateFile\"](path, scriptDirectory);\n            return scriptDirectory + path;\n        }\n        var read_, readAsync, readBinary;\n        if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n            if (ENVIRONMENT_IS_WORKER) scriptDirectory = self.location.href;\n            else if (typeof document != \"undefined\" && document.currentScript) scriptDirectory = document.currentScript.src;\n            if (_scriptDir) scriptDirectory = _scriptDir;\n            if (scriptDirectory.indexOf(\"blob:\") !== 0) scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n            else scriptDirectory = \"\";\n            read_ = (url)=>{\n                var xhr = new XMLHttpRequest;\n                xhr.open(\"GET\", url, false);\n                xhr.send(null);\n                return xhr.responseText;\n            };\n            if (ENVIRONMENT_IS_WORKER) readBinary = (url)=>{\n                var xhr = new XMLHttpRequest;\n                xhr.open(\"GET\", url, false);\n                xhr.responseType = \"arraybuffer\";\n                xhr.send(null);\n                return new Uint8Array(xhr.response);\n            };\n            readAsync = (url, onload, onerror)=>{\n                var xhr = new XMLHttpRequest;\n                xhr.open(\"GET\", url, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onload = ()=>{\n                    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                        onload(xhr.response);\n                        return;\n                    }\n                    onerror();\n                };\n                xhr.onerror = onerror;\n                xhr.send(null);\n            };\n        }\n        var out = Module[\"print\"] || console.log.bind(console);\n        var err = Module[\"printErr\"] || console.error.bind(console);\n        Object.assign(Module, moduleOverrides);\n        moduleOverrides = null;\n        if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n        if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n        if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n        var wasmBinary;\n        if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n        var noExitRuntime = Module[\"noExitRuntime\"] || true;\n        if (typeof WebAssembly != \"object\") abort(\"no native wasm support detected\");\n        var wasmMemory;\n        var ABORT = false;\n        var EXITSTATUS;\n        function assert(condition, text) {\n            if (!condition) abort(text);\n        }\n        var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n        function updateMemoryViews() {\n            var b = wasmMemory.buffer;\n            Module[\"HEAP8\"] = HEAP8 = new Int8Array(b);\n            Module[\"HEAP16\"] = HEAP16 = new Int16Array(b);\n            Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(b);\n            Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(b);\n            Module[\"HEAP32\"] = HEAP32 = new Int32Array(b);\n            Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(b);\n            Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(b);\n            Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(b);\n        }\n        var __ATPRERUN__ = [];\n        var __ATINIT__ = [];\n        var __ATPOSTRUN__ = [];\n        var runtimeInitialized = false;\n        function preRun() {\n            if (Module[\"preRun\"]) {\n                if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [\n                    Module[\"preRun\"]\n                ];\n                while(Module[\"preRun\"].length)addOnPreRun(Module[\"preRun\"].shift());\n            }\n            callRuntimeCallbacks(__ATPRERUN__);\n        }\n        function initRuntime() {\n            runtimeInitialized = true;\n            if (!Module[\"noFSInit\"] && !FS.init.initialized) FS.init();\n            FS.ignorePermissions = false;\n            TTY.init();\n            callRuntimeCallbacks(__ATINIT__);\n        }\n        function postRun() {\n            if (Module[\"postRun\"]) {\n                if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [\n                    Module[\"postRun\"]\n                ];\n                while(Module[\"postRun\"].length)addOnPostRun(Module[\"postRun\"].shift());\n            }\n            callRuntimeCallbacks(__ATPOSTRUN__);\n        }\n        function addOnPreRun(cb) {\n            __ATPRERUN__.unshift(cb);\n        }\n        function addOnInit(cb) {\n            __ATINIT__.unshift(cb);\n        }\n        function addOnPostRun(cb) {\n            __ATPOSTRUN__.unshift(cb);\n        }\n        var runDependencies = 0;\n        var runDependencyWatcher = null;\n        var dependenciesFulfilled = null;\n        function getUniqueRunDependency(id) {\n            return id;\n        }\n        function addRunDependency(id) {\n            runDependencies++;\n            if (Module[\"monitorRunDependencies\"]) Module[\"monitorRunDependencies\"](runDependencies);\n        }\n        function removeRunDependency(id) {\n            runDependencies--;\n            if (Module[\"monitorRunDependencies\"]) Module[\"monitorRunDependencies\"](runDependencies);\n            if (runDependencies == 0) {\n                if (runDependencyWatcher !== null) {\n                    clearInterval(runDependencyWatcher);\n                    runDependencyWatcher = null;\n                }\n                if (dependenciesFulfilled) {\n                    var callback = dependenciesFulfilled;\n                    dependenciesFulfilled = null;\n                    callback();\n                }\n            }\n        }\n        function abort(what) {\n            if (Module[\"onAbort\"]) Module[\"onAbort\"](what);\n            what = \"Aborted(\" + what + \")\";\n            err(what);\n            ABORT = true;\n            EXITSTATUS = 1;\n            what += \". Build with -sASSERTIONS for more info.\";\n            var e = new WebAssembly.RuntimeError(what);\n            readyPromiseReject(e);\n            throw e;\n        }\n        var dataURIPrefix = \"data:application/octet-stream;base64,\";\n        function isDataURI(filename) {\n            return filename.startsWith(dataURIPrefix);\n        }\n        var wasmBinaryFile;\n        wasmBinaryFile = \"process.wasm\";\n        if (!isDataURI(wasmBinaryFile)) wasmBinaryFile = locateFile(wasmBinaryFile);\n        function getBinarySync(file) {\n            if (file == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);\n            if (readBinary) return readBinary(file);\n            throw \"both async and sync fetching of the wasm failed\";\n        }\n        function getBinaryPromise(binaryFile) {\n            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n                if (typeof fetch == \"function\") return fetch(binaryFile, {\n                    credentials: \"same-origin\"\n                }).then((response)=>{\n                    if (!response[\"ok\"]) throw \"failed to load wasm binary file at '\" + binaryFile + \"'\";\n                    return response[\"arrayBuffer\"]();\n                }).catch(()=>getBinarySync(binaryFile));\n            }\n            return Promise.resolve().then(()=>getBinarySync(binaryFile));\n        }\n        function instantiateArrayBuffer(binaryFile, imports, receiver) {\n            return getBinaryPromise(binaryFile).then((binary)=>WebAssembly.instantiate(binary, imports)).then((instance)=>instance).then(receiver, (reason)=>{\n                err(`failed to asynchronously prepare wasm: ${reason}`);\n                abort(reason);\n            });\n        }\n        function instantiateAsync(binary, binaryFile, imports, callback) {\n            if (!binary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(binaryFile) && typeof fetch == \"function\") return fetch(binaryFile, {\n                credentials: \"same-origin\"\n            }).then((response)=>{\n                var result = WebAssembly.instantiateStreaming(response, imports);\n                return result.then(callback, function(reason) {\n                    err(`wasm streaming compile failed: ${reason}`);\n                    err(\"falling back to ArrayBuffer instantiation\");\n                    return instantiateArrayBuffer(binaryFile, imports, callback);\n                });\n            });\n            return instantiateArrayBuffer(binaryFile, imports, callback);\n        }\n        function createWasm() {\n            var info = {\n                \"a\": wasmImports\n            };\n            function receiveInstance(instance, module) {\n                wasmExports = instance.exports;\n                wasmMemory = wasmExports[\"K\"];\n                updateMemoryViews();\n                wasmTable = wasmExports[\"O\"];\n                addOnInit(wasmExports[\"L\"]);\n                removeRunDependency(\"wasm-instantiate\");\n                return wasmExports;\n            }\n            addRunDependency(\"wasm-instantiate\");\n            function receiveInstantiationResult(result) {\n                receiveInstance(result[\"instance\"]);\n            }\n            if (Module[\"instantiateWasm\"]) try {\n                return Module[\"instantiateWasm\"](info, receiveInstance);\n            } catch (e) {\n                err(`Module.instantiateWasm callback failed with error: ${e}`);\n                readyPromiseReject(e);\n            }\n            instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n            return {};\n        }\n        var tempDouble;\n        var tempI64;\n        var callRuntimeCallbacks = (callbacks)=>{\n            while(callbacks.length > 0)callbacks.shift()(Module);\n        };\n        function ExceptionInfo(excPtr) {\n            this.excPtr = excPtr;\n            this.ptr = excPtr - 24;\n            this.set_type = function(type) {\n                HEAPU32[this.ptr + 4 >> 2] = type;\n            };\n            this.get_type = function() {\n                return HEAPU32[this.ptr + 4 >> 2];\n            };\n            this.set_destructor = function(destructor) {\n                HEAPU32[this.ptr + 8 >> 2] = destructor;\n            };\n            this.get_destructor = function() {\n                return HEAPU32[this.ptr + 8 >> 2];\n            };\n            this.set_caught = function(caught) {\n                caught = caught ? 1 : 0;\n                HEAP8[this.ptr + 12 >> 0] = caught;\n            };\n            this.get_caught = function() {\n                return HEAP8[this.ptr + 12 >> 0] != 0;\n            };\n            this.set_rethrown = function(rethrown) {\n                rethrown = rethrown ? 1 : 0;\n                HEAP8[this.ptr + 13 >> 0] = rethrown;\n            };\n            this.get_rethrown = function() {\n                return HEAP8[this.ptr + 13 >> 0] != 0;\n            };\n            this.init = function(type, destructor) {\n                this.set_adjusted_ptr(0);\n                this.set_type(type);\n                this.set_destructor(destructor);\n            };\n            this.set_adjusted_ptr = function(adjustedPtr) {\n                HEAPU32[this.ptr + 16 >> 2] = adjustedPtr;\n            };\n            this.get_adjusted_ptr = function() {\n                return HEAPU32[this.ptr + 16 >> 2];\n            };\n            this.get_exception_ptr = function() {\n                var isPointer = ___cxa_is_pointer_type(this.get_type());\n                if (isPointer) return HEAPU32[this.excPtr >> 2];\n                var adjusted = this.get_adjusted_ptr();\n                if (adjusted !== 0) return adjusted;\n                return this.excPtr;\n            };\n        }\n        var exceptionLast = 0;\n        var uncaughtExceptionCount = 0;\n        var ___cxa_throw = (ptr, type, destructor)=>{\n            var info = new ExceptionInfo(ptr);\n            info.init(type, destructor);\n            exceptionLast = ptr;\n            uncaughtExceptionCount++;\n            throw exceptionLast;\n        };\n        var tupleRegistrations = {};\n        var runDestructors = (destructors)=>{\n            while(destructors.length){\n                var ptr = destructors.pop();\n                var del = destructors.pop();\n                del(ptr);\n            }\n        };\n        function simpleReadValueFromPointer(pointer) {\n            return this[\"fromWireType\"](HEAP32[pointer >> 2]);\n        }\n        var awaitingDependencies = {};\n        var registeredTypes = {};\n        var typeDependencies = {};\n        var InternalError;\n        var throwInternalError = (message)=>{\n            throw new InternalError(message);\n        };\n        var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters)=>{\n            myTypes.forEach(function(type) {\n                typeDependencies[type] = dependentTypes;\n            });\n            function onComplete(typeConverters) {\n                var myTypeConverters = getTypeConverters(typeConverters);\n                if (myTypeConverters.length !== myTypes.length) throwInternalError(\"Mismatched type converter count\");\n                for(var i = 0; i < myTypes.length; ++i)registerType(myTypes[i], myTypeConverters[i]);\n            }\n            var typeConverters = new Array(dependentTypes.length);\n            var unregisteredTypes = [];\n            var registered = 0;\n            dependentTypes.forEach((dt, i)=>{\n                if (registeredTypes.hasOwnProperty(dt)) typeConverters[i] = registeredTypes[dt];\n                else {\n                    unregisteredTypes.push(dt);\n                    if (!awaitingDependencies.hasOwnProperty(dt)) awaitingDependencies[dt] = [];\n                    awaitingDependencies[dt].push(()=>{\n                        typeConverters[i] = registeredTypes[dt];\n                        ++registered;\n                        if (registered === unregisteredTypes.length) onComplete(typeConverters);\n                    });\n                }\n            });\n            if (0 === unregisteredTypes.length) onComplete(typeConverters);\n        };\n        var __embind_finalize_value_array = (rawTupleType)=>{\n            var reg = tupleRegistrations[rawTupleType];\n            delete tupleRegistrations[rawTupleType];\n            var elements = reg.elements;\n            var elementsLength = elements.length;\n            var elementTypes = elements.map((elt)=>elt.getterReturnType).concat(elements.map((elt)=>elt.setterArgumentType));\n            var rawConstructor = reg.rawConstructor;\n            var rawDestructor = reg.rawDestructor;\n            whenDependentTypesAreResolved([\n                rawTupleType\n            ], elementTypes, function(elementTypes) {\n                elements.forEach((elt, i)=>{\n                    var getterReturnType = elementTypes[i];\n                    var getter = elt.getter;\n                    var getterContext = elt.getterContext;\n                    var setterArgumentType = elementTypes[i + elementsLength];\n                    var setter = elt.setter;\n                    var setterContext = elt.setterContext;\n                    elt.read = (ptr)=>getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n                    elt.write = (ptr, o)=>{\n                        var destructors = [];\n                        setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n                        runDestructors(destructors);\n                    };\n                });\n                return [\n                    {\n                        name: reg.name,\n                        \"fromWireType\": (ptr)=>{\n                            var rv = new Array(elementsLength);\n                            for(var i = 0; i < elementsLength; ++i)rv[i] = elements[i].read(ptr);\n                            rawDestructor(ptr);\n                            return rv;\n                        },\n                        \"toWireType\": (destructors, o)=>{\n                            if (elementsLength !== o.length) throw new TypeError(`Incorrect number of tuple elements for ${reg.name}: expected=${elementsLength}, actual=${o.length}`);\n                            var ptr = rawConstructor();\n                            for(var i = 0; i < elementsLength; ++i)elements[i].write(ptr, o[i]);\n                            if (destructors !== null) destructors.push(rawDestructor, ptr);\n                            return ptr;\n                        },\n                        \"argPackAdvance\": GenericWireTypeSize,\n                        \"readValueFromPointer\": simpleReadValueFromPointer,\n                        destructorFunction: rawDestructor\n                    }\n                ];\n            });\n        };\n        var structRegistrations = {};\n        var __embind_finalize_value_object = (structType)=>{\n            var reg = structRegistrations[structType];\n            delete structRegistrations[structType];\n            var rawConstructor = reg.rawConstructor;\n            var rawDestructor = reg.rawDestructor;\n            var fieldRecords = reg.fields;\n            var fieldTypes = fieldRecords.map((field)=>field.getterReturnType).concat(fieldRecords.map((field)=>field.setterArgumentType));\n            whenDependentTypesAreResolved([\n                structType\n            ], fieldTypes, (fieldTypes)=>{\n                var fields = {};\n                fieldRecords.forEach((field, i)=>{\n                    var fieldName = field.fieldName;\n                    var getterReturnType = fieldTypes[i];\n                    var getter = field.getter;\n                    var getterContext = field.getterContext;\n                    var setterArgumentType = fieldTypes[i + fieldRecords.length];\n                    var setter = field.setter;\n                    var setterContext = field.setterContext;\n                    fields[fieldName] = {\n                        read: (ptr)=>getterReturnType[\"fromWireType\"](getter(getterContext, ptr)),\n                        write: (ptr, o)=>{\n                            var destructors = [];\n                            setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n                            runDestructors(destructors);\n                        }\n                    };\n                });\n                return [\n                    {\n                        name: reg.name,\n                        \"fromWireType\": (ptr)=>{\n                            var rv = {};\n                            for(var i in fields)rv[i] = fields[i].read(ptr);\n                            rawDestructor(ptr);\n                            return rv;\n                        },\n                        \"toWireType\": (destructors, o)=>{\n                            for(var fieldName in fields){\n                                if (!(fieldName in o)) throw new TypeError(`Missing field: \"${fieldName}\"`);\n                            }\n                            var ptr = rawConstructor();\n                            for(fieldName in fields)fields[fieldName].write(ptr, o[fieldName]);\n                            if (destructors !== null) destructors.push(rawDestructor, ptr);\n                            return ptr;\n                        },\n                        \"argPackAdvance\": GenericWireTypeSize,\n                        \"readValueFromPointer\": simpleReadValueFromPointer,\n                        destructorFunction: rawDestructor\n                    }\n                ];\n            });\n        };\n        var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange)=>{};\n        var embind_init_charCodes = ()=>{\n            var codes = new Array(256);\n            for(var i = 0; i < 256; ++i)codes[i] = String.fromCharCode(i);\n            embind_charCodes = codes;\n        };\n        var embind_charCodes;\n        var readLatin1String = (ptr)=>{\n            var ret = \"\";\n            var c = ptr;\n            while(HEAPU8[c])ret += embind_charCodes[HEAPU8[c++]];\n            return ret;\n        };\n        var BindingError;\n        var throwBindingError = (message)=>{\n            throw new BindingError(message);\n        };\n        function sharedRegisterType(rawType, registeredInstance, options = {}) {\n            var name = registeredInstance.name;\n            if (!rawType) throwBindingError(`type \"${name}\" must have a positive integer typeid pointer`);\n            if (registeredTypes.hasOwnProperty(rawType)) {\n                if (options.ignoreDuplicateRegistrations) return;\n                else throwBindingError(`Cannot register type '${name}' twice`);\n            }\n            registeredTypes[rawType] = registeredInstance;\n            delete typeDependencies[rawType];\n            if (awaitingDependencies.hasOwnProperty(rawType)) {\n                var callbacks = awaitingDependencies[rawType];\n                delete awaitingDependencies[rawType];\n                callbacks.forEach((cb)=>cb());\n            }\n        }\n        function registerType(rawType, registeredInstance, options = {}) {\n            if (!(\"argPackAdvance\" in registeredInstance)) throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            return sharedRegisterType(rawType, registeredInstance, options);\n        }\n        var GenericWireTypeSize = 8;\n        var __embind_register_bool = (rawType, name, trueValue, falseValue)=>{\n            name = readLatin1String(name);\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\": function(wt) {\n                    return !!wt;\n                },\n                \"toWireType\": function(destructors, o) {\n                    return o ? trueValue : falseValue;\n                },\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": function(pointer) {\n                    return this[\"fromWireType\"](HEAPU8[pointer]);\n                },\n                destructorFunction: null\n            });\n        };\n        var shallowCopyInternalPointer = (o)=>({\n                count: o.count,\n                deleteScheduled: o.deleteScheduled,\n                preservePointerOnDelete: o.preservePointerOnDelete,\n                ptr: o.ptr,\n                ptrType: o.ptrType,\n                smartPtr: o.smartPtr,\n                smartPtrType: o.smartPtrType\n            });\n        var throwInstanceAlreadyDeleted = (obj)=>{\n            function getInstanceTypeName(handle) {\n                return handle.$$.ptrType.registeredClass.name;\n            }\n            throwBindingError(getInstanceTypeName(obj) + \" instance already deleted\");\n        };\n        var finalizationRegistry = false;\n        var detachFinalizer = (handle)=>{};\n        var runDestructor = ($$)=>{\n            if ($$.smartPtr) $$.smartPtrType.rawDestructor($$.smartPtr);\n            else $$.ptrType.registeredClass.rawDestructor($$.ptr);\n        };\n        var releaseClassHandle = ($$)=>{\n            $$.count.value -= 1;\n            var toDelete = 0 === $$.count.value;\n            if (toDelete) runDestructor($$);\n        };\n        var downcastPointer = (ptr, ptrClass, desiredClass)=>{\n            if (ptrClass === desiredClass) return ptr;\n            if (undefined === desiredClass.baseClass) return null;\n            var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n            if (rv === null) return null;\n            return desiredClass.downcast(rv);\n        };\n        var registeredPointers = {};\n        var getInheritedInstanceCount = ()=>Object.keys(registeredInstances).length;\n        var getLiveInheritedInstances = ()=>{\n            var rv = [];\n            for(var k in registeredInstances)if (registeredInstances.hasOwnProperty(k)) rv.push(registeredInstances[k]);\n            return rv;\n        };\n        var deletionQueue = [];\n        var flushPendingDeletes = ()=>{\n            while(deletionQueue.length){\n                var obj = deletionQueue.pop();\n                obj.$$.deleteScheduled = false;\n                obj[\"delete\"]();\n            }\n        };\n        var delayFunction;\n        var setDelayFunction = (fn)=>{\n            delayFunction = fn;\n            if (deletionQueue.length && delayFunction) delayFunction(flushPendingDeletes);\n        };\n        var init_embind = ()=>{\n            Module[\"getInheritedInstanceCount\"] = getInheritedInstanceCount;\n            Module[\"getLiveInheritedInstances\"] = getLiveInheritedInstances;\n            Module[\"flushPendingDeletes\"] = flushPendingDeletes;\n            Module[\"setDelayFunction\"] = setDelayFunction;\n        };\n        var registeredInstances = {};\n        var getBasestPointer = (class_, ptr)=>{\n            if (ptr === undefined) throwBindingError(\"ptr should not be undefined\");\n            while(class_.baseClass){\n                ptr = class_.upcast(ptr);\n                class_ = class_.baseClass;\n            }\n            return ptr;\n        };\n        var getInheritedInstance = (class_, ptr)=>{\n            ptr = getBasestPointer(class_, ptr);\n            return registeredInstances[ptr];\n        };\n        var makeClassHandle = (prototype, record)=>{\n            if (!record.ptrType || !record.ptr) throwInternalError(\"makeClassHandle requires ptr and ptrType\");\n            var hasSmartPtrType = !!record.smartPtrType;\n            var hasSmartPtr = !!record.smartPtr;\n            if (hasSmartPtrType !== hasSmartPtr) throwInternalError(\"Both smartPtrType and smartPtr must be specified\");\n            record.count = {\n                value: 1\n            };\n            return attachFinalizer(Object.create(prototype, {\n                $$: {\n                    value: record\n                }\n            }));\n        };\n        function RegisteredPointer_fromWireType(ptr) {\n            var rawPointer = this.getPointee(ptr);\n            if (!rawPointer) {\n                this.destructor(ptr);\n                return null;\n            }\n            var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n            if (undefined !== registeredInstance) {\n                if (0 === registeredInstance.$$.count.value) {\n                    registeredInstance.$$.ptr = rawPointer;\n                    registeredInstance.$$.smartPtr = ptr;\n                    return registeredInstance[\"clone\"]();\n                } else {\n                    var rv = registeredInstance[\"clone\"]();\n                    this.destructor(ptr);\n                    return rv;\n                }\n            }\n            function makeDefaultHandle() {\n                if (this.isSmartPointer) return makeClassHandle(this.registeredClass.instancePrototype, {\n                    ptrType: this.pointeeType,\n                    ptr: rawPointer,\n                    smartPtrType: this,\n                    smartPtr: ptr\n                });\n                else return makeClassHandle(this.registeredClass.instancePrototype, {\n                    ptrType: this,\n                    ptr: ptr\n                });\n            }\n            var actualType = this.registeredClass.getActualType(rawPointer);\n            var registeredPointerRecord = registeredPointers[actualType];\n            if (!registeredPointerRecord) return makeDefaultHandle.call(this);\n            var toType;\n            if (this.isConst) toType = registeredPointerRecord.constPointerType;\n            else toType = registeredPointerRecord.pointerType;\n            var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n            if (dp === null) return makeDefaultHandle.call(this);\n            if (this.isSmartPointer) return makeClassHandle(toType.registeredClass.instancePrototype, {\n                ptrType: toType,\n                ptr: dp,\n                smartPtrType: this,\n                smartPtr: ptr\n            });\n            else return makeClassHandle(toType.registeredClass.instancePrototype, {\n                ptrType: toType,\n                ptr: dp\n            });\n        }\n        var attachFinalizer = (handle)=>{\n            if (\"undefined\" === typeof FinalizationRegistry) {\n                attachFinalizer = (handle)=>handle;\n                return handle;\n            }\n            finalizationRegistry = new FinalizationRegistry((info)=>{\n                releaseClassHandle(info.$$);\n            });\n            attachFinalizer = (handle)=>{\n                var $$ = handle.$$;\n                var hasSmartPtr = !!$$.smartPtr;\n                if (hasSmartPtr) {\n                    var info = {\n                        $$: $$\n                    };\n                    finalizationRegistry.register(handle, info, handle);\n                }\n                return handle;\n            };\n            detachFinalizer = (handle)=>finalizationRegistry.unregister(handle);\n            return attachFinalizer(handle);\n        };\n        var init_ClassHandle = ()=>{\n            Object.assign(ClassHandle.prototype, {\n                \"isAliasOf\" (other) {\n                    if (!(this instanceof ClassHandle)) return false;\n                    if (!(other instanceof ClassHandle)) return false;\n                    var leftClass = this.$$.ptrType.registeredClass;\n                    var left = this.$$.ptr;\n                    other.$$ = other.$$;\n                    var rightClass = other.$$.ptrType.registeredClass;\n                    var right = other.$$.ptr;\n                    while(leftClass.baseClass){\n                        left = leftClass.upcast(left);\n                        leftClass = leftClass.baseClass;\n                    }\n                    while(rightClass.baseClass){\n                        right = rightClass.upcast(right);\n                        rightClass = rightClass.baseClass;\n                    }\n                    return leftClass === rightClass && left === right;\n                },\n                \"clone\" () {\n                    if (!this.$$.ptr) throwInstanceAlreadyDeleted(this);\n                    if (this.$$.preservePointerOnDelete) {\n                        this.$$.count.value += 1;\n                        return this;\n                    } else {\n                        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n                            $$: {\n                                value: shallowCopyInternalPointer(this.$$)\n                            }\n                        }));\n                        clone.$$.count.value += 1;\n                        clone.$$.deleteScheduled = false;\n                        return clone;\n                    }\n                },\n                \"delete\" () {\n                    if (!this.$$.ptr) throwInstanceAlreadyDeleted(this);\n                    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) throwBindingError(\"Object already scheduled for deletion\");\n                    detachFinalizer(this);\n                    releaseClassHandle(this.$$);\n                    if (!this.$$.preservePointerOnDelete) {\n                        this.$$.smartPtr = undefined;\n                        this.$$.ptr = undefined;\n                    }\n                },\n                \"isDeleted\" () {\n                    return !this.$$.ptr;\n                },\n                \"deleteLater\" () {\n                    if (!this.$$.ptr) throwInstanceAlreadyDeleted(this);\n                    if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) throwBindingError(\"Object already scheduled for deletion\");\n                    deletionQueue.push(this);\n                    if (deletionQueue.length === 1 && delayFunction) delayFunction(flushPendingDeletes);\n                    this.$$.deleteScheduled = true;\n                    return this;\n                }\n            });\n        };\n        function ClassHandle() {}\n        var char_0 = 48;\n        var char_9 = 57;\n        var makeLegalFunctionName = (name)=>{\n            if (undefined === name) return \"_unknown\";\n            name = name.replace(/[^a-zA-Z0-9_]/g, \"$\");\n            var f = name.charCodeAt(0);\n            if (f >= char_0 && f <= char_9) return `_${name}`;\n            return name;\n        };\n        function createNamedFunction(name, body) {\n            name = makeLegalFunctionName(name);\n            return ({\n                [name]: function() {\n                    return body.apply(this, arguments);\n                }\n            })[name];\n        }\n        var ensureOverloadTable = (proto, methodName, humanName)=>{\n            if (undefined === proto[methodName].overloadTable) {\n                var prevFunc = proto[methodName];\n                proto[methodName] = function() {\n                    if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`);\n                    return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n                };\n                proto[methodName].overloadTable = [];\n                proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n            }\n        };\n        var exposePublicSymbol = (name, value, numArguments)=>{\n            if (Module.hasOwnProperty(name)) {\n                if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) throwBindingError(`Cannot register public name '${name}' twice`);\n                ensureOverloadTable(Module, name, name);\n                if (Module.hasOwnProperty(numArguments)) throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);\n                Module[name].overloadTable[numArguments] = value;\n            } else {\n                Module[name] = value;\n                if (undefined !== numArguments) Module[name].numArguments = numArguments;\n            }\n        };\n        function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n            this.name = name;\n            this.constructor = constructor;\n            this.instancePrototype = instancePrototype;\n            this.rawDestructor = rawDestructor;\n            this.baseClass = baseClass;\n            this.getActualType = getActualType;\n            this.upcast = upcast;\n            this.downcast = downcast;\n            this.pureVirtualFunctions = [];\n        }\n        var upcastPointer = (ptr, ptrClass, desiredClass)=>{\n            while(ptrClass !== desiredClass){\n                if (!ptrClass.upcast) throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);\n                ptr = ptrClass.upcast(ptr);\n                ptrClass = ptrClass.baseClass;\n            }\n            return ptr;\n        };\n        function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n            if (handle === null) {\n                if (this.isReference) throwBindingError(`null is not a valid ${this.name}`);\n                return 0;\n            }\n            if (!handle.$$) throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`);\n            if (!handle.$$.ptr) throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);\n            var handleClass = handle.$$.ptrType.registeredClass;\n            var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n            return ptr;\n        }\n        function genericPointerToWireType(destructors, handle) {\n            var ptr;\n            if (handle === null) {\n                if (this.isReference) throwBindingError(`null is not a valid ${this.name}`);\n                if (this.isSmartPointer) {\n                    ptr = this.rawConstructor();\n                    if (destructors !== null) destructors.push(this.rawDestructor, ptr);\n                    return ptr;\n                } else return 0;\n            }\n            if (!handle.$$) throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`);\n            if (!handle.$$.ptr) throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);\n            if (!this.isConst && handle.$$.ptrType.isConst) throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`);\n            var handleClass = handle.$$.ptrType.registeredClass;\n            ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n            if (this.isSmartPointer) {\n                if (undefined === handle.$$.smartPtr) throwBindingError(\"Passing raw pointer to smart pointer is illegal\");\n                switch(this.sharingPolicy){\n                    case 0:\n                        if (handle.$$.smartPtrType === this) ptr = handle.$$.smartPtr;\n                        else throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`);\n                        break;\n                    case 1:\n                        ptr = handle.$$.smartPtr;\n                        break;\n                    case 2:\n                        if (handle.$$.smartPtrType === this) ptr = handle.$$.smartPtr;\n                        else {\n                            var clonedHandle = handle[\"clone\"]();\n                            ptr = this.rawShare(ptr, Emval.toHandle(()=>clonedHandle[\"delete\"]()));\n                            if (destructors !== null) destructors.push(this.rawDestructor, ptr);\n                        }\n                        break;\n                    default:\n                        throwBindingError(\"Unsupporting sharing policy\");\n                }\n            }\n            return ptr;\n        }\n        function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n            if (handle === null) {\n                if (this.isReference) throwBindingError(`null is not a valid ${this.name}`);\n                return 0;\n            }\n            if (!handle.$$) throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`);\n            if (!handle.$$.ptr) throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);\n            if (handle.$$.ptrType.isConst) throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);\n            var handleClass = handle.$$.ptrType.registeredClass;\n            var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n            return ptr;\n        }\n        function readPointer(pointer) {\n            return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n        }\n        var init_RegisteredPointer = ()=>{\n            Object.assign(RegisteredPointer.prototype, {\n                getPointee (ptr) {\n                    if (this.rawGetPointee) ptr = this.rawGetPointee(ptr);\n                    return ptr;\n                },\n                destructor (ptr) {\n                    if (this.rawDestructor) this.rawDestructor(ptr);\n                },\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": readPointer,\n                \"deleteObject\" (handle) {\n                    if (handle !== null) handle[\"delete\"]();\n                },\n                \"fromWireType\": RegisteredPointer_fromWireType\n            });\n        };\n        function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n            this.name = name;\n            this.registeredClass = registeredClass;\n            this.isReference = isReference;\n            this.isConst = isConst;\n            this.isSmartPointer = isSmartPointer;\n            this.pointeeType = pointeeType;\n            this.sharingPolicy = sharingPolicy;\n            this.rawGetPointee = rawGetPointee;\n            this.rawConstructor = rawConstructor;\n            this.rawShare = rawShare;\n            this.rawDestructor = rawDestructor;\n            if (!isSmartPointer && registeredClass.baseClass === undefined) {\n                if (isConst) {\n                    this[\"toWireType\"] = constNoSmartPtrRawPointerToWireType;\n                    this.destructorFunction = null;\n                } else {\n                    this[\"toWireType\"] = nonConstNoSmartPtrRawPointerToWireType;\n                    this.destructorFunction = null;\n                }\n            } else this[\"toWireType\"] = genericPointerToWireType;\n        }\n        var replacePublicSymbol = (name, value, numArguments)=>{\n            if (!Module.hasOwnProperty(name)) throwInternalError(\"Replacing nonexistant public symbol\");\n            if (undefined !== Module[name].overloadTable && undefined !== numArguments) Module[name].overloadTable[numArguments] = value;\n            else {\n                Module[name] = value;\n                Module[name].argCount = numArguments;\n            }\n        };\n        var dynCallLegacy = (sig, ptr, args)=>{\n            var f = Module[\"dynCall_\" + sig];\n            return args && args.length ? f.apply(null, [\n                ptr\n            ].concat(args)) : f.call(null, ptr);\n        };\n        var wasmTableMirror = [];\n        var wasmTable;\n        var getWasmTableEntry = (funcPtr)=>{\n            var func = wasmTableMirror[funcPtr];\n            if (!func) {\n                if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n                wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n            }\n            return func;\n        };\n        var dynCall = (sig, ptr, args)=>{\n            if (sig.includes(\"j\")) return dynCallLegacy(sig, ptr, args);\n            var rtn = getWasmTableEntry(ptr).apply(null, args);\n            return rtn;\n        };\n        var getDynCaller = (sig, ptr)=>{\n            var argCache = [];\n            return function() {\n                argCache.length = 0;\n                Object.assign(argCache, arguments);\n                return dynCall(sig, ptr, argCache);\n            };\n        };\n        var embind__requireFunction = (signature, rawFunction)=>{\n            signature = readLatin1String(signature);\n            function makeDynCaller() {\n                if (signature.includes(\"j\")) return getDynCaller(signature, rawFunction);\n                return getWasmTableEntry(rawFunction);\n            }\n            var fp = makeDynCaller();\n            if (typeof fp != \"function\") throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);\n            return fp;\n        };\n        var extendError = (baseErrorType, errorName)=>{\n            var errorClass = createNamedFunction(errorName, function(message) {\n                this.name = errorName;\n                this.message = message;\n                var stack = new Error(message).stack;\n                if (stack !== undefined) this.stack = this.toString() + \"\\n\" + stack.replace(/^Error(:[^\\n]*)?\\n/, \"\");\n            });\n            errorClass.prototype = Object.create(baseErrorType.prototype);\n            errorClass.prototype.constructor = errorClass;\n            errorClass.prototype.toString = function() {\n                if (this.message === undefined) return this.name;\n                else return `${this.name}: ${this.message}`;\n            };\n            return errorClass;\n        };\n        var UnboundTypeError;\n        var getTypeName = (type)=>{\n            var ptr = ___getTypeName(type);\n            var rv = readLatin1String(ptr);\n            _free(ptr);\n            return rv;\n        };\n        var throwUnboundTypeError = (message, types)=>{\n            var unboundTypes = [];\n            var seen = {};\n            function visit(type) {\n                if (seen[type]) return;\n                if (registeredTypes[type]) return;\n                if (typeDependencies[type]) {\n                    typeDependencies[type].forEach(visit);\n                    return;\n                }\n                unboundTypes.push(type);\n                seen[type] = true;\n            }\n            types.forEach(visit);\n            throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([\n                \", \"\n            ]));\n        };\n        var __embind_register_class = (rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor)=>{\n            name = readLatin1String(name);\n            getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n            if (upcast) upcast = embind__requireFunction(upcastSignature, upcast);\n            if (downcast) downcast = embind__requireFunction(downcastSignature, downcast);\n            rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n            var legalFunctionName = makeLegalFunctionName(name);\n            exposePublicSymbol(legalFunctionName, function() {\n                throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [\n                    baseClassRawType\n                ]);\n            });\n            whenDependentTypesAreResolved([\n                rawType,\n                rawPointerType,\n                rawConstPointerType\n            ], baseClassRawType ? [\n                baseClassRawType\n            ] : [], function(base) {\n                base = base[0];\n                var baseClass;\n                var basePrototype;\n                if (baseClassRawType) {\n                    baseClass = base.registeredClass;\n                    basePrototype = baseClass.instancePrototype;\n                } else basePrototype = ClassHandle.prototype;\n                var constructor = createNamedFunction(legalFunctionName, function() {\n                    if (Object.getPrototypeOf(this) !== instancePrototype) throw new BindingError(\"Use 'new' to construct \" + name);\n                    if (undefined === registeredClass.constructor_body) throw new BindingError(name + \" has no accessible constructor\");\n                    var body = registeredClass.constructor_body[arguments.length];\n                    if (undefined === body) throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);\n                    return body.apply(this, arguments);\n                });\n                var instancePrototype = Object.create(basePrototype, {\n                    constructor: {\n                        value: constructor\n                    }\n                });\n                constructor.prototype = instancePrototype;\n                var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n                if (registeredClass.baseClass) {\n                    if (registeredClass.baseClass.__derivedClasses === undefined) registeredClass.baseClass.__derivedClasses = [];\n                    registeredClass.baseClass.__derivedClasses.push(registeredClass);\n                }\n                var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n                var pointerConverter = new RegisteredPointer(name + \"*\", registeredClass, false, false, false);\n                var constPointerConverter = new RegisteredPointer(name + \" const*\", registeredClass, false, true, false);\n                registeredPointers[rawType] = {\n                    pointerType: pointerConverter,\n                    constPointerType: constPointerConverter\n                };\n                replacePublicSymbol(legalFunctionName, constructor);\n                return [\n                    referenceConverter,\n                    pointerConverter,\n                    constPointerConverter\n                ];\n            });\n        };\n        var heap32VectorToArray = (count, firstElement)=>{\n            var array = [];\n            for(var i = 0; i < count; i++)array.push(HEAPU32[firstElement + i * 4 >> 2]);\n            return array;\n        };\n        function newFunc(constructor, argumentList) {\n            if (!(constructor instanceof Function)) throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`);\n            var dummy = createNamedFunction(constructor.name || \"unknownFunctionName\", function() {});\n            dummy.prototype = constructor.prototype;\n            var obj = new dummy;\n            var r = constructor.apply(obj, argumentList);\n            return r instanceof Object ? r : obj;\n        }\n        function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {\n            var argCount = argTypes.length;\n            if (argCount < 2) throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n            var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n            var needsDestructorStack = false;\n            for(var i = 1; i < argTypes.length; ++i)if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n                needsDestructorStack = true;\n                break;\n            }\n            var returns = argTypes[0].name !== \"void\";\n            var argsList = \"\";\n            var argsListWired = \"\";\n            for(var i = 0; i < argCount - 2; ++i){\n                argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n                argsListWired += (i !== 0 ? \", \" : \"\") + \"arg\" + i + \"Wired\";\n            }\n            var invokerFnBody = `\\n        return function ${makeLegalFunctionName(humanName)}(${argsList}) {\\n        if (arguments.length !== ${argCount - 2}) {\\n          throwBindingError('function ${humanName} called with ' + arguments.length + ' arguments, expected ${argCount - 2}');\\n        }`;\n            if (needsDestructorStack) invokerFnBody += \"var destructors = [];\\n\";\n            var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n            var args1 = [\n                \"throwBindingError\",\n                \"invoker\",\n                \"fn\",\n                \"runDestructors\",\n                \"retType\",\n                \"classParam\"\n            ];\n            var args2 = [\n                throwBindingError,\n                cppInvokerFunc,\n                cppTargetFunc,\n                runDestructors,\n                argTypes[0],\n                argTypes[1]\n            ];\n            if (isClassMethodFunc) invokerFnBody += \"var thisWired = classParam.toWireType(\" + dtorStack + \", this);\\n\";\n            for(var i = 0; i < argCount - 2; ++i){\n                invokerFnBody += \"var arg\" + i + \"Wired = argType\" + i + \".toWireType(\" + dtorStack + \", arg\" + i + \"); // \" + argTypes[i + 2].name + \"\\n\";\n                args1.push(\"argType\" + i);\n                args2.push(argTypes[i + 2]);\n            }\n            if (isClassMethodFunc) argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n            invokerFnBody += (returns || isAsync ? \"var rv = \" : \"\") + \"invoker(fn\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired + \");\\n\";\n            if (needsDestructorStack) invokerFnBody += \"runDestructors(destructors);\\n\";\n            else for(var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i){\n                var paramName = i === 1 ? \"thisWired\" : \"arg\" + (i - 2) + \"Wired\";\n                if (argTypes[i].destructorFunction !== null) {\n                    invokerFnBody += paramName + \"_dtor(\" + paramName + \"); // \" + argTypes[i].name + \"\\n\";\n                    args1.push(paramName + \"_dtor\");\n                    args2.push(argTypes[i].destructorFunction);\n                }\n            }\n            if (returns) invokerFnBody += \"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\";\n            invokerFnBody += \"}\\n\";\n            args1.push(invokerFnBody);\n            return newFunc(Function, args1).apply(null, args2);\n        }\n        var __embind_register_class_constructor = (rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor)=>{\n            var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n            invoker = embind__requireFunction(invokerSignature, invoker);\n            whenDependentTypesAreResolved([], [\n                rawClassType\n            ], function(classType) {\n                classType = classType[0];\n                var humanName = `constructor ${classType.name}`;\n                if (undefined === classType.registeredClass.constructor_body) classType.registeredClass.constructor_body = [];\n                if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount - 1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\n                classType.registeredClass.constructor_body[argCount - 1] = ()=>{\n                    throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);\n                };\n                whenDependentTypesAreResolved([], rawArgTypes, (argTypes)=>{\n                    argTypes.splice(1, 0, null);\n                    classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);\n                    return [];\n                });\n                return [];\n            });\n        };\n        var __embind_register_class_function = (rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual, isAsync)=>{\n            var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n            methodName = readLatin1String(methodName);\n            rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n            whenDependentTypesAreResolved([], [\n                rawClassType\n            ], function(classType) {\n                classType = classType[0];\n                var humanName = `${classType.name}.${methodName}`;\n                if (methodName.startsWith(\"@@\")) methodName = Symbol[methodName.substring(2)];\n                if (isPureVirtual) classType.registeredClass.pureVirtualFunctions.push(methodName);\n                function unboundTypesHandler() {\n                    throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);\n                }\n                var proto = classType.registeredClass.instancePrototype;\n                var method = proto[methodName];\n                if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n                    unboundTypesHandler.argCount = argCount - 2;\n                    unboundTypesHandler.className = classType.name;\n                    proto[methodName] = unboundTypesHandler;\n                } else {\n                    ensureOverloadTable(proto, methodName, humanName);\n                    proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n                }\n                whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n                    var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);\n                    if (undefined === proto[methodName].overloadTable) {\n                        memberFunction.argCount = argCount - 2;\n                        proto[methodName] = memberFunction;\n                    } else proto[methodName].overloadTable[argCount - 2] = memberFunction;\n                    return [];\n                });\n                return [];\n            });\n        };\n        var validateThis = (this_, classType, humanName)=>{\n            if (!(this_ instanceof Object)) throwBindingError(`${humanName} with invalid \"this\": ${this_}`);\n            if (!(this_ instanceof classType.registeredClass.constructor)) throwBindingError(`${humanName} incompatible with \"this\" of type ${this_.constructor.name}`);\n            if (!this_.$$.ptr) throwBindingError(`cannot call emscripten binding method ${humanName} on deleted object`);\n            return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);\n        };\n        var __embind_register_class_property = (classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext)=>{\n            fieldName = readLatin1String(fieldName);\n            getter = embind__requireFunction(getterSignature, getter);\n            whenDependentTypesAreResolved([], [\n                classType\n            ], function(classType) {\n                classType = classType[0];\n                var humanName = `${classType.name}.${fieldName}`;\n                var desc = {\n                    get () {\n                        throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`, [\n                            getterReturnType,\n                            setterArgumentType\n                        ]);\n                    },\n                    enumerable: true,\n                    configurable: true\n                };\n                if (setter) desc.set = ()=>throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`, [\n                        getterReturnType,\n                        setterArgumentType\n                    ]);\n                else desc.set = (v)=>throwBindingError(humanName + \" is a read-only property\");\n                Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n                whenDependentTypesAreResolved([], setter ? [\n                    getterReturnType,\n                    setterArgumentType\n                ] : [\n                    getterReturnType\n                ], function(types) {\n                    var getterReturnType = types[0];\n                    var desc = {\n                        get () {\n                            var ptr = validateThis(this, classType, humanName + \" getter\");\n                            return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n                        },\n                        enumerable: true\n                    };\n                    if (setter) {\n                        setter = embind__requireFunction(setterSignature, setter);\n                        var setterArgumentType = types[1];\n                        desc.set = function(v) {\n                            var ptr = validateThis(this, classType, humanName + \" setter\");\n                            var destructors = [];\n                            setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, v));\n                            runDestructors(destructors);\n                        };\n                    }\n                    Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n                    return [];\n                });\n                return [];\n            });\n        };\n        function handleAllocatorInit() {\n            Object.assign(HandleAllocator.prototype, {\n                get (id) {\n                    return this.allocated[id];\n                },\n                has (id) {\n                    return this.allocated[id] !== undefined;\n                },\n                allocate (handle) {\n                    var id = this.freelist.pop() || this.allocated.length;\n                    this.allocated[id] = handle;\n                    return id;\n                },\n                free (id) {\n                    this.allocated[id] = undefined;\n                    this.freelist.push(id);\n                }\n            });\n        }\n        function HandleAllocator() {\n            this.allocated = [\n                undefined\n            ];\n            this.freelist = [];\n        }\n        var emval_handles = new HandleAllocator;\n        var __emval_decref = (handle)=>{\n            if (handle >= emval_handles.reserved && 0 === --emval_handles.get(handle).refcount) emval_handles.free(handle);\n        };\n        var count_emval_handles = ()=>{\n            var count = 0;\n            for(var i = emval_handles.reserved; i < emval_handles.allocated.length; ++i)if (emval_handles.allocated[i] !== undefined) ++count;\n            return count;\n        };\n        var init_emval = ()=>{\n            emval_handles.allocated.push({\n                value: undefined\n            }, {\n                value: null\n            }, {\n                value: true\n            }, {\n                value: false\n            });\n            emval_handles.reserved = emval_handles.allocated.length;\n            Module[\"count_emval_handles\"] = count_emval_handles;\n        };\n        var Emval = {\n            toValue: (handle)=>{\n                if (!handle) throwBindingError(\"Cannot use deleted val. handle = \" + handle);\n                return emval_handles.get(handle).value;\n            },\n            toHandle: (value)=>{\n                switch(value){\n                    case undefined:\n                        return 1;\n                    case null:\n                        return 2;\n                    case true:\n                        return 3;\n                    case false:\n                        return 4;\n                    default:\n                        return emval_handles.allocate({\n                            refcount: 1,\n                            value: value\n                        });\n                }\n            }\n        };\n        var __embind_register_emval = (rawType, name)=>{\n            name = readLatin1String(name);\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\": (handle)=>{\n                    var rv = Emval.toValue(handle);\n                    __emval_decref(handle);\n                    return rv;\n                },\n                \"toWireType\": (destructors, value)=>Emval.toHandle(value),\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": simpleReadValueFromPointer,\n                destructorFunction: null\n            });\n        };\n        var enumReadValueFromPointer = (name, width, signed)=>{\n            switch(width){\n                case 1:\n                    return signed ? function(pointer) {\n                        return this[\"fromWireType\"](HEAP8[pointer >> 0]);\n                    } : function(pointer) {\n                        return this[\"fromWireType\"](HEAPU8[pointer >> 0]);\n                    };\n                case 2:\n                    return signed ? function(pointer) {\n                        return this[\"fromWireType\"](HEAP16[pointer >> 1]);\n                    } : function(pointer) {\n                        return this[\"fromWireType\"](HEAPU16[pointer >> 1]);\n                    };\n                case 4:\n                    return signed ? function(pointer) {\n                        return this[\"fromWireType\"](HEAP32[pointer >> 2]);\n                    } : function(pointer) {\n                        return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n                    };\n                default:\n                    throw new TypeError(`invalid integer width (${width}): ${name}`);\n            }\n        };\n        var __embind_register_enum = (rawType, name, size, isSigned)=>{\n            name = readLatin1String(name);\n            function ctor() {}\n            ctor.values = {};\n            registerType(rawType, {\n                name: name,\n                constructor: ctor,\n                \"fromWireType\": function(c) {\n                    return this.constructor.values[c];\n                },\n                \"toWireType\": (destructors, c)=>c.value,\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": enumReadValueFromPointer(name, size, isSigned),\n                destructorFunction: null\n            });\n            exposePublicSymbol(name, ctor);\n        };\n        var requireRegisteredType = (rawType, humanName)=>{\n            var impl = registeredTypes[rawType];\n            if (undefined === impl) throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n            return impl;\n        };\n        var __embind_register_enum_value = (rawEnumType, name, enumValue)=>{\n            var enumType = requireRegisteredType(rawEnumType, \"enum\");\n            name = readLatin1String(name);\n            var Enum = enumType.constructor;\n            var Value = Object.create(enumType.constructor.prototype, {\n                value: {\n                    value: enumValue\n                },\n                constructor: {\n                    value: createNamedFunction(`${enumType.name}_${name}`, function() {})\n                }\n            });\n            Enum.values[enumValue] = Value;\n            Enum[name] = Value;\n        };\n        var embindRepr = (v)=>{\n            if (v === null) return \"null\";\n            var t = typeof v;\n            if (t === \"object\" || t === \"array\" || t === \"function\") return v.toString();\n            else return \"\" + v;\n        };\n        var floatReadValueFromPointer = (name, width)=>{\n            switch(width){\n                case 4:\n                    return function(pointer) {\n                        return this[\"fromWireType\"](HEAPF32[pointer >> 2]);\n                    };\n                case 8:\n                    return function(pointer) {\n                        return this[\"fromWireType\"](HEAPF64[pointer >> 3]);\n                    };\n                default:\n                    throw new TypeError(`invalid float width (${width}): ${name}`);\n            }\n        };\n        var __embind_register_float = (rawType, name, size)=>{\n            name = readLatin1String(name);\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\": (value)=>value,\n                \"toWireType\": (destructors, value)=>value,\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": floatReadValueFromPointer(name, size),\n                destructorFunction: null\n            });\n        };\n        var __embind_register_function = (name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync)=>{\n            var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n            name = readLatin1String(name);\n            rawInvoker = embind__requireFunction(signature, rawInvoker);\n            exposePublicSymbol(name, function() {\n                throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);\n            }, argCount - 1);\n            whenDependentTypesAreResolved([], argTypes, function(argTypes) {\n                var invokerArgsArray = [\n                    argTypes[0],\n                    null\n                ].concat(argTypes.slice(1));\n                replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn, isAsync), argCount - 1);\n                return [];\n            });\n        };\n        var integerReadValueFromPointer = (name, width, signed)=>{\n            switch(width){\n                case 1:\n                    return signed ? (pointer)=>HEAP8[pointer >> 0] : (pointer)=>HEAPU8[pointer >> 0];\n                case 2:\n                    return signed ? (pointer)=>HEAP16[pointer >> 1] : (pointer)=>HEAPU16[pointer >> 1];\n                case 4:\n                    return signed ? (pointer)=>HEAP32[pointer >> 2] : (pointer)=>HEAPU32[pointer >> 2];\n                default:\n                    throw new TypeError(`invalid integer width (${width}): ${name}`);\n            }\n        };\n        var __embind_register_integer = (primitiveType, name, size, minRange, maxRange)=>{\n            name = readLatin1String(name);\n            if (maxRange === -1) maxRange = 4294967295;\n            var fromWireType = (value)=>value;\n            if (minRange === 0) {\n                var bitshift = 32 - 8 * size;\n                fromWireType = (value)=>value << bitshift >>> bitshift;\n            }\n            var isUnsignedType = name.includes(\"unsigned\");\n            var checkAssertions = (value, toTypeName)=>{};\n            var toWireType;\n            if (isUnsignedType) toWireType = function(destructors, value) {\n                checkAssertions(value, this.name);\n                return value >>> 0;\n            };\n            else toWireType = function(destructors, value) {\n                checkAssertions(value, this.name);\n                return value;\n            };\n            registerType(primitiveType, {\n                name: name,\n                \"fromWireType\": fromWireType,\n                \"toWireType\": toWireType,\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": integerReadValueFromPointer(name, size, minRange !== 0),\n                destructorFunction: null\n            });\n        };\n        var __embind_register_memory_view = (rawType, dataTypeIndex, name)=>{\n            var typeMapping = [\n                Int8Array,\n                Uint8Array,\n                Int16Array,\n                Uint16Array,\n                Int32Array,\n                Uint32Array,\n                Float32Array,\n                Float64Array\n            ];\n            var TA = typeMapping[dataTypeIndex];\n            function decodeMemoryView(handle) {\n                var size = HEAPU32[handle >> 2];\n                var data = HEAPU32[handle + 4 >> 2];\n                return new TA(HEAP8.buffer, data, size);\n            }\n            name = readLatin1String(name);\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\": decodeMemoryView,\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": decodeMemoryView\n            }, {\n                ignoreDuplicateRegistrations: true\n            });\n        };\n        var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite)=>{\n            if (!(maxBytesToWrite > 0)) return 0;\n            var startIdx = outIdx;\n            var endIdx = outIdx + maxBytesToWrite - 1;\n            for(var i = 0; i < str.length; ++i){\n                var u = str.charCodeAt(i);\n                if (u >= 55296 && u <= 57343) {\n                    var u1 = str.charCodeAt(++i);\n                    u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n                }\n                if (u <= 127) {\n                    if (outIdx >= endIdx) break;\n                    heap[outIdx++] = u;\n                } else if (u <= 2047) {\n                    if (outIdx + 1 >= endIdx) break;\n                    heap[outIdx++] = 192 | u >> 6;\n                    heap[outIdx++] = 128 | u & 63;\n                } else if (u <= 65535) {\n                    if (outIdx + 2 >= endIdx) break;\n                    heap[outIdx++] = 224 | u >> 12;\n                    heap[outIdx++] = 128 | u >> 6 & 63;\n                    heap[outIdx++] = 128 | u & 63;\n                } else {\n                    if (outIdx + 3 >= endIdx) break;\n                    heap[outIdx++] = 240 | u >> 18;\n                    heap[outIdx++] = 128 | u >> 12 & 63;\n                    heap[outIdx++] = 128 | u >> 6 & 63;\n                    heap[outIdx++] = 128 | u & 63;\n                }\n            }\n            heap[outIdx] = 0;\n            return outIdx - startIdx;\n        };\n        var stringToUTF8 = (str, outPtr, maxBytesToWrite)=>stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n        var lengthBytesUTF8 = (str)=>{\n            var len = 0;\n            for(var i = 0; i < str.length; ++i){\n                var c = str.charCodeAt(i);\n                if (c <= 127) len++;\n                else if (c <= 2047) len += 2;\n                else if (c >= 55296 && c <= 57343) {\n                    len += 4;\n                    ++i;\n                } else len += 3;\n            }\n            return len;\n        };\n        var UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n        var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead)=>{\n            var endIdx = idx + maxBytesToRead;\n            var endPtr = idx;\n            while(heapOrArray[endPtr] && !(endPtr >= endIdx))++endPtr;\n            if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n            var str = \"\";\n            while(idx < endPtr){\n                var u0 = heapOrArray[idx++];\n                if (!(u0 & 128)) {\n                    str += String.fromCharCode(u0);\n                    continue;\n                }\n                var u1 = heapOrArray[idx++] & 63;\n                if ((u0 & 224) == 192) {\n                    str += String.fromCharCode((u0 & 31) << 6 | u1);\n                    continue;\n                }\n                var u2 = heapOrArray[idx++] & 63;\n                if ((u0 & 240) == 224) u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n                else u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n                if (u0 < 65536) str += String.fromCharCode(u0);\n                else {\n                    var ch = u0 - 65536;\n                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n                }\n            }\n            return str;\n        };\n        var UTF8ToString = (ptr, maxBytesToRead)=>ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n        var __embind_register_std_string = (rawType, name)=>{\n            name = readLatin1String(name);\n            var stdStringIsUTF8 = name === \"std::string\";\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\" (value) {\n                    var length = HEAPU32[value >> 2];\n                    var payload = value + 4;\n                    var str;\n                    if (stdStringIsUTF8) {\n                        var decodeStartPtr = payload;\n                        for(var i = 0; i <= length; ++i){\n                            var currentBytePtr = payload + i;\n                            if (i == length || HEAPU8[currentBytePtr] == 0) {\n                                var maxRead = currentBytePtr - decodeStartPtr;\n                                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n                                if (str === undefined) str = stringSegment;\n                                else {\n                                    str += String.fromCharCode(0);\n                                    str += stringSegment;\n                                }\n                                decodeStartPtr = currentBytePtr + 1;\n                            }\n                        }\n                    } else {\n                        var a = new Array(length);\n                        for(var i = 0; i < length; ++i)a[i] = String.fromCharCode(HEAPU8[payload + i]);\n                        str = a.join(\"\");\n                    }\n                    _free(value);\n                    return str;\n                },\n                \"toWireType\" (destructors, value) {\n                    if (value instanceof ArrayBuffer) value = new Uint8Array(value);\n                    var length;\n                    var valueIsOfTypeString = typeof value == \"string\";\n                    if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) throwBindingError(\"Cannot pass non-string to std::string\");\n                    if (stdStringIsUTF8 && valueIsOfTypeString) length = lengthBytesUTF8(value);\n                    else length = value.length;\n                    var base = _malloc(4 + length + 1);\n                    var ptr = base + 4;\n                    HEAPU32[base >> 2] = length;\n                    if (stdStringIsUTF8 && valueIsOfTypeString) stringToUTF8(value, ptr, length + 1);\n                    else {\n                        if (valueIsOfTypeString) for(var i = 0; i < length; ++i){\n                            var charCode = value.charCodeAt(i);\n                            if (charCode > 255) {\n                                _free(ptr);\n                                throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");\n                            }\n                            HEAPU8[ptr + i] = charCode;\n                        }\n                        else for(var i = 0; i < length; ++i)HEAPU8[ptr + i] = value[i];\n                    }\n                    if (destructors !== null) destructors.push(_free, base);\n                    return base;\n                },\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": readPointer,\n                destructorFunction (ptr) {\n                    _free(ptr);\n                }\n            });\n        };\n        var UTF16Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n        var UTF16ToString = (ptr, maxBytesToRead)=>{\n            var endPtr = ptr;\n            var idx = endPtr >> 1;\n            var maxIdx = idx + maxBytesToRead / 2;\n            while(!(idx >= maxIdx) && HEAPU16[idx])++idx;\n            endPtr = idx << 1;\n            if (endPtr - ptr > 32 && UTF16Decoder) return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n            var str = \"\";\n            for(var i = 0; !(i >= maxBytesToRead / 2); ++i){\n                var codeUnit = HEAP16[ptr + i * 2 >> 1];\n                if (codeUnit == 0) break;\n                str += String.fromCharCode(codeUnit);\n            }\n            return str;\n        };\n        var stringToUTF16 = (str, outPtr, maxBytesToWrite)=>{\n            if (maxBytesToWrite === undefined) maxBytesToWrite = 2147483647;\n            if (maxBytesToWrite < 2) return 0;\n            maxBytesToWrite -= 2;\n            var startPtr = outPtr;\n            var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n            for(var i = 0; i < numCharsToWrite; ++i){\n                var codeUnit = str.charCodeAt(i);\n                HEAP16[outPtr >> 1] = codeUnit;\n                outPtr += 2;\n            }\n            HEAP16[outPtr >> 1] = 0;\n            return outPtr - startPtr;\n        };\n        var lengthBytesUTF16 = (str)=>str.length * 2;\n        var UTF32ToString = (ptr, maxBytesToRead)=>{\n            var i = 0;\n            var str = \"\";\n            while(!(i >= maxBytesToRead / 4)){\n                var utf32 = HEAP32[ptr + i * 4 >> 2];\n                if (utf32 == 0) break;\n                ++i;\n                if (utf32 >= 65536) {\n                    var ch = utf32 - 65536;\n                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n                } else str += String.fromCharCode(utf32);\n            }\n            return str;\n        };\n        var stringToUTF32 = (str, outPtr, maxBytesToWrite)=>{\n            if (maxBytesToWrite === undefined) maxBytesToWrite = 2147483647;\n            if (maxBytesToWrite < 4) return 0;\n            var startPtr = outPtr;\n            var endPtr = startPtr + maxBytesToWrite - 4;\n            for(var i = 0; i < str.length; ++i){\n                var codeUnit = str.charCodeAt(i);\n                if (codeUnit >= 55296 && codeUnit <= 57343) {\n                    var trailSurrogate = str.charCodeAt(++i);\n                    codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n                }\n                HEAP32[outPtr >> 2] = codeUnit;\n                outPtr += 4;\n                if (outPtr + 4 > endPtr) break;\n            }\n            HEAP32[outPtr >> 2] = 0;\n            return outPtr - startPtr;\n        };\n        var lengthBytesUTF32 = (str)=>{\n            var len = 0;\n            for(var i = 0; i < str.length; ++i){\n                var codeUnit = str.charCodeAt(i);\n                if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n                len += 4;\n            }\n            return len;\n        };\n        var __embind_register_std_wstring = (rawType, charSize, name)=>{\n            name = readLatin1String(name);\n            var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n            if (charSize === 2) {\n                decodeString = UTF16ToString;\n                encodeString = stringToUTF16;\n                lengthBytesUTF = lengthBytesUTF16;\n                getHeap = ()=>HEAPU16;\n                shift = 1;\n            } else if (charSize === 4) {\n                decodeString = UTF32ToString;\n                encodeString = stringToUTF32;\n                lengthBytesUTF = lengthBytesUTF32;\n                getHeap = ()=>HEAPU32;\n                shift = 2;\n            }\n            registerType(rawType, {\n                name: name,\n                \"fromWireType\": (value)=>{\n                    var length = HEAPU32[value >> 2];\n                    var HEAP = getHeap();\n                    var str;\n                    var decodeStartPtr = value + 4;\n                    for(var i = 0; i <= length; ++i){\n                        var currentBytePtr = value + 4 + i * charSize;\n                        if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n                            var maxReadBytes = currentBytePtr - decodeStartPtr;\n                            var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n                            if (str === undefined) str = stringSegment;\n                            else {\n                                str += String.fromCharCode(0);\n                                str += stringSegment;\n                            }\n                            decodeStartPtr = currentBytePtr + charSize;\n                        }\n                    }\n                    _free(value);\n                    return str;\n                },\n                \"toWireType\": (destructors, value)=>{\n                    if (!(typeof value == \"string\")) throwBindingError(`Cannot pass non-string to C++ string type ${name}`);\n                    var length = lengthBytesUTF(value);\n                    var ptr = _malloc(4 + length + charSize);\n                    HEAPU32[ptr >> 2] = length >> shift;\n                    encodeString(value, ptr + 4, length + charSize);\n                    if (destructors !== null) destructors.push(_free, ptr);\n                    return ptr;\n                },\n                \"argPackAdvance\": GenericWireTypeSize,\n                \"readValueFromPointer\": simpleReadValueFromPointer,\n                destructorFunction (ptr) {\n                    _free(ptr);\n                }\n            });\n        };\n        var __embind_register_value_array = (rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor)=>{\n            tupleRegistrations[rawType] = {\n                name: readLatin1String(name),\n                rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n                rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n                elements: []\n            };\n        };\n        var __embind_register_value_array_element = (rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext)=>{\n            tupleRegistrations[rawTupleType].elements.push({\n                getterReturnType: getterReturnType,\n                getter: embind__requireFunction(getterSignature, getter),\n                getterContext: getterContext,\n                setterArgumentType: setterArgumentType,\n                setter: embind__requireFunction(setterSignature, setter),\n                setterContext: setterContext\n            });\n        };\n        var __embind_register_value_object = (rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor)=>{\n            structRegistrations[rawType] = {\n                name: readLatin1String(name),\n                rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n                rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n                fields: []\n            };\n        };\n        var __embind_register_value_object_field = (structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext)=>{\n            structRegistrations[structType].fields.push({\n                fieldName: readLatin1String(fieldName),\n                getterReturnType: getterReturnType,\n                getter: embind__requireFunction(getterSignature, getter),\n                getterContext: getterContext,\n                setterArgumentType: setterArgumentType,\n                setter: embind__requireFunction(setterSignature, setter),\n                setterContext: setterContext\n            });\n        };\n        var __embind_register_void = (rawType, name)=>{\n            name = readLatin1String(name);\n            registerType(rawType, {\n                isVoid: true,\n                name: name,\n                \"argPackAdvance\": 0,\n                \"fromWireType\": ()=>undefined,\n                \"toWireType\": (destructors, o)=>undefined\n            });\n        };\n        var __emval_incref = (handle)=>{\n            if (handle > 4) emval_handles.get(handle).refcount += 1;\n        };\n        var __emval_take_value = (type, arg)=>{\n            type = requireRegisteredType(type, \"_emval_take_value\");\n            var v = type[\"readValueFromPointer\"](arg);\n            return Emval.toHandle(v);\n        };\n        var _abort = ()=>{\n            abort(\"\");\n        };\n        var _emscripten_memcpy_js = (dest, src, num)=>HEAPU8.copyWithin(dest, src, src + num);\n        var getHeapMax = ()=>2147483648;\n        var growMemory = (size)=>{\n            var b = wasmMemory.buffer;\n            var pages = (size - b.byteLength + 65535) / 65536;\n            try {\n                wasmMemory.grow(pages);\n                updateMemoryViews();\n                return 1;\n            } catch (e) {}\n        };\n        var _emscripten_resize_heap = (requestedSize)=>{\n            var oldSize = HEAPU8.length;\n            requestedSize >>>= 0;\n            var maxHeapSize = getHeapMax();\n            if (requestedSize > maxHeapSize) return false;\n            var alignUp = (x, multiple)=>x + (multiple - x % multiple) % multiple;\n            for(var cutDown = 1; cutDown <= 4; cutDown *= 2){\n                var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n                var replacement = growMemory(newSize);\n                if (replacement) return true;\n            }\n            return false;\n        };\n        var ENV = {};\n        var getExecutableName = ()=>thisProgram || \"./this.program\";\n        var getEnvStrings = ()=>{\n            if (!getEnvStrings.strings) {\n                var lang = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\";\n                var env = {\n                    \"USER\": \"web_user\",\n                    \"LOGNAME\": \"web_user\",\n                    \"PATH\": \"/\",\n                    \"PWD\": \"/\",\n                    \"HOME\": \"/home/web_user\",\n                    \"LANG\": lang,\n                    \"_\": getExecutableName()\n                };\n                for(var x in ENV)if (ENV[x] === undefined) delete env[x];\n                else env[x] = ENV[x];\n                var strings = [];\n                for(var x in env)strings.push(`${x}=${env[x]}`);\n                getEnvStrings.strings = strings;\n            }\n            return getEnvStrings.strings;\n        };\n        var stringToAscii = (str, buffer)=>{\n            for(var i = 0; i < str.length; ++i)HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n            HEAP8[buffer >> 0] = 0;\n        };\n        var PATH = {\n            isAbs: (path)=>path.charAt(0) === \"/\",\n            splitPath: (filename)=>{\n                var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n                return splitPathRe.exec(filename).slice(1);\n            },\n            normalizeArray: (parts, allowAboveRoot)=>{\n                var up = 0;\n                for(var i = parts.length - 1; i >= 0; i--){\n                    var last = parts[i];\n                    if (last === \".\") parts.splice(i, 1);\n                    else if (last === \"..\") {\n                        parts.splice(i, 1);\n                        up++;\n                    } else if (up) {\n                        parts.splice(i, 1);\n                        up--;\n                    }\n                }\n                if (allowAboveRoot) for(; up; up--)parts.unshift(\"..\");\n                return parts;\n            },\n            normalize: (path)=>{\n                var isAbsolute = PATH.isAbs(path), trailingSlash = path.substr(-1) === \"/\";\n                path = PATH.normalizeArray(path.split(\"/\").filter((p)=>!!p), !isAbsolute).join(\"/\");\n                if (!path && !isAbsolute) path = \".\";\n                if (path && trailingSlash) path += \"/\";\n                return (isAbsolute ? \"/\" : \"\") + path;\n            },\n            dirname: (path)=>{\n                var result = PATH.splitPath(path), root = result[0], dir = result[1];\n                if (!root && !dir) return \".\";\n                if (dir) dir = dir.substr(0, dir.length - 1);\n                return root + dir;\n            },\n            basename: (path)=>{\n                if (path === \"/\") return \"/\";\n                path = PATH.normalize(path);\n                path = path.replace(/\\/$/, \"\");\n                var lastSlash = path.lastIndexOf(\"/\");\n                if (lastSlash === -1) return path;\n                return path.substr(lastSlash + 1);\n            },\n            join: function() {\n                var paths = Array.prototype.slice.call(arguments);\n                return PATH.normalize(paths.join(\"/\"));\n            },\n            join2: (l, r)=>PATH.normalize(l + \"/\" + r)\n        };\n        var initRandomFill = ()=>{\n            if (typeof crypto == \"object\" && typeof crypto[\"getRandomValues\"] == \"function\") return (view)=>crypto.getRandomValues(view);\n            else abort(\"initRandomDevice\");\n        };\n        var randomFill = (view)=>(randomFill = initRandomFill())(view);\n        var PATH_FS = {\n            resolve: function() {\n                var resolvedPath = \"\", resolvedAbsolute = false;\n                for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){\n                    var path = i >= 0 ? arguments[i] : FS.cwd();\n                    if (typeof path != \"string\") throw new TypeError(\"Arguments to path.resolve must be strings\");\n                    else if (!path) return \"\";\n                    resolvedPath = path + \"/\" + resolvedPath;\n                    resolvedAbsolute = PATH.isAbs(path);\n                }\n                resolvedPath = PATH.normalizeArray(resolvedPath.split(\"/\").filter((p)=>!!p), !resolvedAbsolute).join(\"/\");\n                return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n            },\n            relative: (from, to)=>{\n                from = PATH_FS.resolve(from).substr(1);\n                to = PATH_FS.resolve(to).substr(1);\n                function trim(arr) {\n                    var start = 0;\n                    for(; start < arr.length; start++){\n                        if (arr[start] !== \"\") break;\n                    }\n                    var end = arr.length - 1;\n                    for(; end >= 0; end--){\n                        if (arr[end] !== \"\") break;\n                    }\n                    if (start > end) return [];\n                    return arr.slice(start, end - start + 1);\n                }\n                var fromParts = trim(from.split(\"/\"));\n                var toParts = trim(to.split(\"/\"));\n                var length = Math.min(fromParts.length, toParts.length);\n                var samePartsLength = length;\n                for(var i = 0; i < length; i++)if (fromParts[i] !== toParts[i]) {\n                    samePartsLength = i;\n                    break;\n                }\n                var outputParts = [];\n                for(var i = samePartsLength; i < fromParts.length; i++)outputParts.push(\"..\");\n                outputParts = outputParts.concat(toParts.slice(samePartsLength));\n                return outputParts.join(\"/\");\n            }\n        };\n        var FS_stdin_getChar_buffer = [];\n        function intArrayFromString(stringy, dontAddNull, length) {\n            var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n            var u8array = new Array(len);\n            var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n            if (dontAddNull) u8array.length = numBytesWritten;\n            return u8array;\n        }\n        var FS_stdin_getChar = ()=>{\n            if (!FS_stdin_getChar_buffer.length) {\n                var result = null;\n                if (typeof window != \"undefined\" && typeof window.prompt == \"function\") {\n                    result = window.prompt(\"Input: \");\n                    if (result !== null) result += \"\\n\";\n                } else if (typeof readline == \"function\") {\n                    result = readline();\n                    if (result !== null) result += \"\\n\";\n                }\n                if (!result) return null;\n                FS_stdin_getChar_buffer = intArrayFromString(result, true);\n            }\n            return FS_stdin_getChar_buffer.shift();\n        };\n        var TTY = {\n            ttys: [],\n            init () {},\n            shutdown () {},\n            register (dev, ops) {\n                TTY.ttys[dev] = {\n                    input: [],\n                    output: [],\n                    ops: ops\n                };\n                FS.registerDevice(dev, TTY.stream_ops);\n            },\n            stream_ops: {\n                open (stream) {\n                    var tty = TTY.ttys[stream.node.rdev];\n                    if (!tty) throw new FS.ErrnoError(43);\n                    stream.tty = tty;\n                    stream.seekable = false;\n                },\n                close (stream) {\n                    stream.tty.ops.fsync(stream.tty);\n                },\n                fsync (stream) {\n                    stream.tty.ops.fsync(stream.tty);\n                },\n                read (stream, buffer, offset, length, pos) {\n                    if (!stream.tty || !stream.tty.ops.get_char) throw new FS.ErrnoError(60);\n                    var bytesRead = 0;\n                    for(var i = 0; i < length; i++){\n                        var result;\n                        try {\n                            result = stream.tty.ops.get_char(stream.tty);\n                        } catch (e) {\n                            throw new FS.ErrnoError(29);\n                        }\n                        if (result === undefined && bytesRead === 0) throw new FS.ErrnoError(6);\n                        if (result === null || result === undefined) break;\n                        bytesRead++;\n                        buffer[offset + i] = result;\n                    }\n                    if (bytesRead) stream.node.timestamp = Date.now();\n                    return bytesRead;\n                },\n                write (stream, buffer, offset, length, pos) {\n                    if (!stream.tty || !stream.tty.ops.put_char) throw new FS.ErrnoError(60);\n                    try {\n                        for(var i = 0; i < length; i++)stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n                    } catch (e) {\n                        throw new FS.ErrnoError(29);\n                    }\n                    if (length) stream.node.timestamp = Date.now();\n                    return i;\n                }\n            },\n            default_tty_ops: {\n                get_char (tty) {\n                    return FS_stdin_getChar();\n                },\n                put_char (tty, val) {\n                    if (val === null || val === 10) {\n                        out(UTF8ArrayToString(tty.output, 0));\n                        tty.output = [];\n                    } else if (val != 0) tty.output.push(val);\n                },\n                fsync (tty) {\n                    if (tty.output && tty.output.length > 0) {\n                        out(UTF8ArrayToString(tty.output, 0));\n                        tty.output = [];\n                    }\n                },\n                ioctl_tcgets (tty) {\n                    return {\n                        c_iflag: 25856,\n                        c_oflag: 5,\n                        c_cflag: 191,\n                        c_lflag: 35387,\n                        c_cc: [\n                            3,\n                            28,\n                            127,\n                            21,\n                            4,\n                            0,\n                            1,\n                            0,\n                            17,\n                            19,\n                            26,\n                            0,\n                            18,\n                            15,\n                            23,\n                            22,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ]\n                    };\n                },\n                ioctl_tcsets (tty, optional_actions, data) {\n                    return 0;\n                },\n                ioctl_tiocgwinsz (tty) {\n                    return [\n                        24,\n                        80\n                    ];\n                }\n            },\n            default_tty1_ops: {\n                put_char (tty, val) {\n                    if (val === null || val === 10) {\n                        err(UTF8ArrayToString(tty.output, 0));\n                        tty.output = [];\n                    } else if (val != 0) tty.output.push(val);\n                },\n                fsync (tty) {\n                    if (tty.output && tty.output.length > 0) {\n                        err(UTF8ArrayToString(tty.output, 0));\n                        tty.output = [];\n                    }\n                }\n            }\n        };\n        var mmapAlloc = (size)=>{\n            abort();\n        };\n        var MEMFS = {\n            ops_table: null,\n            mount (mount) {\n                return MEMFS.createNode(null, \"/\", 16895, 0);\n            },\n            createNode (parent, name, mode, dev) {\n                if (FS.isBlkdev(mode) || FS.isFIFO(mode)) throw new FS.ErrnoError(63);\n                if (!MEMFS.ops_table) MEMFS.ops_table = {\n                    dir: {\n                        node: {\n                            getattr: MEMFS.node_ops.getattr,\n                            setattr: MEMFS.node_ops.setattr,\n                            lookup: MEMFS.node_ops.lookup,\n                            mknod: MEMFS.node_ops.mknod,\n                            rename: MEMFS.node_ops.rename,\n                            unlink: MEMFS.node_ops.unlink,\n                            rmdir: MEMFS.node_ops.rmdir,\n                            readdir: MEMFS.node_ops.readdir,\n                            symlink: MEMFS.node_ops.symlink\n                        },\n                        stream: {\n                            llseek: MEMFS.stream_ops.llseek\n                        }\n                    },\n                    file: {\n                        node: {\n                            getattr: MEMFS.node_ops.getattr,\n                            setattr: MEMFS.node_ops.setattr\n                        },\n                        stream: {\n                            llseek: MEMFS.stream_ops.llseek,\n                            read: MEMFS.stream_ops.read,\n                            write: MEMFS.stream_ops.write,\n                            allocate: MEMFS.stream_ops.allocate,\n                            mmap: MEMFS.stream_ops.mmap,\n                            msync: MEMFS.stream_ops.msync\n                        }\n                    },\n                    link: {\n                        node: {\n                            getattr: MEMFS.node_ops.getattr,\n                            setattr: MEMFS.node_ops.setattr,\n                            readlink: MEMFS.node_ops.readlink\n                        },\n                        stream: {}\n                    },\n                    chrdev: {\n                        node: {\n                            getattr: MEMFS.node_ops.getattr,\n                            setattr: MEMFS.node_ops.setattr\n                        },\n                        stream: FS.chrdev_stream_ops\n                    }\n                };\n                var node = FS.createNode(parent, name, mode, dev);\n                if (FS.isDir(node.mode)) {\n                    node.node_ops = MEMFS.ops_table.dir.node;\n                    node.stream_ops = MEMFS.ops_table.dir.stream;\n                    node.contents = {};\n                } else if (FS.isFile(node.mode)) {\n                    node.node_ops = MEMFS.ops_table.file.node;\n                    node.stream_ops = MEMFS.ops_table.file.stream;\n                    node.usedBytes = 0;\n                    node.contents = null;\n                } else if (FS.isLink(node.mode)) {\n                    node.node_ops = MEMFS.ops_table.link.node;\n                    node.stream_ops = MEMFS.ops_table.link.stream;\n                } else if (FS.isChrdev(node.mode)) {\n                    node.node_ops = MEMFS.ops_table.chrdev.node;\n                    node.stream_ops = MEMFS.ops_table.chrdev.stream;\n                }\n                node.timestamp = Date.now();\n                if (parent) {\n                    parent.contents[name] = node;\n                    parent.timestamp = node.timestamp;\n                }\n                return node;\n            },\n            getFileDataAsTypedArray (node) {\n                if (!node.contents) return new Uint8Array(0);\n                if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);\n                return new Uint8Array(node.contents);\n            },\n            expandFileStorage (node, newCapacity) {\n                var prevCapacity = node.contents ? node.contents.length : 0;\n                if (prevCapacity >= newCapacity) return;\n                var CAPACITY_DOUBLING_MAX = 1048576;\n                newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);\n                if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n                var oldContents = node.contents;\n                node.contents = new Uint8Array(newCapacity);\n                if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n            },\n            resizeFileStorage (node, newSize) {\n                if (node.usedBytes == newSize) return;\n                if (newSize == 0) {\n                    node.contents = null;\n                    node.usedBytes = 0;\n                } else {\n                    var oldContents = node.contents;\n                    node.contents = new Uint8Array(newSize);\n                    if (oldContents) node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));\n                    node.usedBytes = newSize;\n                }\n            },\n            node_ops: {\n                getattr (node) {\n                    var attr = {};\n                    attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n                    attr.ino = node.id;\n                    attr.mode = node.mode;\n                    attr.nlink = 1;\n                    attr.uid = 0;\n                    attr.gid = 0;\n                    attr.rdev = node.rdev;\n                    if (FS.isDir(node.mode)) attr.size = 4096;\n                    else if (FS.isFile(node.mode)) attr.size = node.usedBytes;\n                    else if (FS.isLink(node.mode)) attr.size = node.link.length;\n                    else attr.size = 0;\n                    attr.atime = new Date(node.timestamp);\n                    attr.mtime = new Date(node.timestamp);\n                    attr.ctime = new Date(node.timestamp);\n                    attr.blksize = 4096;\n                    attr.blocks = Math.ceil(attr.size / attr.blksize);\n                    return attr;\n                },\n                setattr (node, attr) {\n                    if (attr.mode !== undefined) node.mode = attr.mode;\n                    if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;\n                    if (attr.size !== undefined) MEMFS.resizeFileStorage(node, attr.size);\n                },\n                lookup (parent, name) {\n                    throw FS.genericErrors[44];\n                },\n                mknod (parent, name, mode, dev) {\n                    return MEMFS.createNode(parent, name, mode, dev);\n                },\n                rename (old_node, new_dir, new_name) {\n                    if (FS.isDir(old_node.mode)) {\n                        var new_node;\n                        try {\n                            new_node = FS.lookupNode(new_dir, new_name);\n                        } catch (e) {}\n                        if (new_node) {\n                            for(var i in new_node.contents)throw new FS.ErrnoError(55);\n                        }\n                    }\n                    delete old_node.parent.contents[old_node.name];\n                    old_node.parent.timestamp = Date.now();\n                    old_node.name = new_name;\n                    new_dir.contents[new_name] = old_node;\n                    new_dir.timestamp = old_node.parent.timestamp;\n                    old_node.parent = new_dir;\n                },\n                unlink (parent, name) {\n                    delete parent.contents[name];\n                    parent.timestamp = Date.now();\n                },\n                rmdir (parent, name) {\n                    var node = FS.lookupNode(parent, name);\n                    for(var i in node.contents)throw new FS.ErrnoError(55);\n                    delete parent.contents[name];\n                    parent.timestamp = Date.now();\n                },\n                readdir (node) {\n                    var entries = [\n                        \".\",\n                        \"..\"\n                    ];\n                    for(var key in node.contents){\n                        if (!node.contents.hasOwnProperty(key)) continue;\n                        entries.push(key);\n                    }\n                    return entries;\n                },\n                symlink (parent, newname, oldpath) {\n                    var node = MEMFS.createNode(parent, newname, 41471, 0);\n                    node.link = oldpath;\n                    return node;\n                },\n                readlink (node) {\n                    if (!FS.isLink(node.mode)) throw new FS.ErrnoError(28);\n                    return node.link;\n                }\n            },\n            stream_ops: {\n                read (stream, buffer, offset, length, position) {\n                    var contents = stream.node.contents;\n                    if (position >= stream.node.usedBytes) return 0;\n                    var size = Math.min(stream.node.usedBytes - position, length);\n                    if (size > 8 && contents.subarray) buffer.set(contents.subarray(position, position + size), offset);\n                    else for(var i = 0; i < size; i++)buffer[offset + i] = contents[position + i];\n                    return size;\n                },\n                write (stream, buffer, offset, length, position, canOwn) {\n                    if (buffer.buffer === HEAP8.buffer) canOwn = false;\n                    if (!length) return 0;\n                    var node = stream.node;\n                    node.timestamp = Date.now();\n                    if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n                        if (canOwn) {\n                            node.contents = buffer.subarray(offset, offset + length);\n                            node.usedBytes = length;\n                            return length;\n                        } else if (node.usedBytes === 0 && position === 0) {\n                            node.contents = buffer.slice(offset, offset + length);\n                            node.usedBytes = length;\n                            return length;\n                        } else if (position + length <= node.usedBytes) {\n                            node.contents.set(buffer.subarray(offset, offset + length), position);\n                            return length;\n                        }\n                    }\n                    MEMFS.expandFileStorage(node, position + length);\n                    if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position);\n                    else for(var i = 0; i < length; i++)node.contents[position + i] = buffer[offset + i];\n                    node.usedBytes = Math.max(node.usedBytes, position + length);\n                    return length;\n                },\n                llseek (stream, offset, whence) {\n                    var position = offset;\n                    if (whence === 1) position += stream.position;\n                    else if (whence === 2) {\n                        if (FS.isFile(stream.node.mode)) position += stream.node.usedBytes;\n                    }\n                    if (position < 0) throw new FS.ErrnoError(28);\n                    return position;\n                },\n                allocate (stream, offset, length) {\n                    MEMFS.expandFileStorage(stream.node, offset + length);\n                    stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n                },\n                mmap (stream, length, position, prot, flags) {\n                    if (!FS.isFile(stream.node.mode)) throw new FS.ErrnoError(43);\n                    var ptr;\n                    var allocated;\n                    var contents = stream.node.contents;\n                    if (!(flags & 2) && contents.buffer === HEAP8.buffer) {\n                        allocated = false;\n                        ptr = contents.byteOffset;\n                    } else {\n                        if (position > 0 || position + length < contents.length) {\n                            if (contents.subarray) contents = contents.subarray(position, position + length);\n                            else contents = Array.prototype.slice.call(contents, position, position + length);\n                        }\n                        allocated = true;\n                        ptr = mmapAlloc(length);\n                        if (!ptr) throw new FS.ErrnoError(48);\n                        HEAP8.set(contents, ptr);\n                    }\n                    return {\n                        ptr: ptr,\n                        allocated: allocated\n                    };\n                },\n                msync (stream, buffer, offset, length, mmapFlags) {\n                    MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n                    return 0;\n                }\n            }\n        };\n        var asyncLoad = (url, onload, onerror, noRunDep)=>{\n            var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : \"\";\n            readAsync(url, (arrayBuffer)=>{\n                assert(arrayBuffer, `Loading data file \"${url}\" failed (no arrayBuffer).`);\n                onload(new Uint8Array(arrayBuffer));\n                if (dep) removeRunDependency(dep);\n            }, (event)=>{\n                if (onerror) onerror();\n                else throw `Loading data file \"${url}\" failed.`;\n            });\n            if (dep) addRunDependency(dep);\n        };\n        var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn)=>FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);\n        var preloadPlugins = Module[\"preloadPlugins\"] || [];\n        var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror)=>{\n            if (typeof Browser != \"undefined\") Browser.init();\n            var handled = false;\n            preloadPlugins.forEach((plugin)=>{\n                if (handled) return;\n                if (plugin[\"canHandle\"](fullname)) {\n                    plugin[\"handle\"](byteArray, fullname, finish, onerror);\n                    handled = true;\n                }\n            });\n            return handled;\n        };\n        var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish)=>{\n            var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n            var dep = getUniqueRunDependency(`cp ${fullname}`);\n            function processData(byteArray) {\n                function finish(byteArray) {\n                    if (preFinish) preFinish();\n                    if (!dontCreateFile) FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n                    if (onload) onload();\n                    removeRunDependency(dep);\n                }\n                if (FS_handledByPreloadPlugin(byteArray, fullname, finish, ()=>{\n                    if (onerror) onerror();\n                    removeRunDependency(dep);\n                })) return;\n                finish(byteArray);\n            }\n            addRunDependency(dep);\n            if (typeof url == \"string\") asyncLoad(url, (byteArray)=>processData(byteArray), onerror);\n            else processData(url);\n        };\n        var FS_modeStringToFlags = (str)=>{\n            var flagModes = {\n                \"r\": 0,\n                \"r+\": 2,\n                \"w\": 577,\n                \"w+\": 578,\n                \"a\": 1089,\n                \"a+\": 1090\n            };\n            var flags = flagModes[str];\n            if (typeof flags == \"undefined\") throw new Error(`Unknown file open mode: ${str}`);\n            return flags;\n        };\n        var FS_getMode = (canRead, canWrite)=>{\n            var mode = 0;\n            if (canRead) mode |= 365;\n            if (canWrite) mode |= 146;\n            return mode;\n        };\n        var FS = {\n            root: null,\n            mounts: [],\n            devices: {},\n            streams: [],\n            nextInode: 1,\n            nameTable: null,\n            currentPath: \"/\",\n            initialized: false,\n            ignorePermissions: true,\n            ErrnoError: null,\n            genericErrors: {},\n            filesystems: null,\n            syncFSRequests: 0,\n            lookupPath (path, opts = {}) {\n                path = PATH_FS.resolve(path);\n                if (!path) return {\n                    path: \"\",\n                    node: null\n                };\n                var defaults = {\n                    follow_mount: true,\n                    recurse_count: 0\n                };\n                opts = Object.assign(defaults, opts);\n                if (opts.recurse_count > 8) throw new FS.ErrnoError(32);\n                var parts = path.split(\"/\").filter((p)=>!!p);\n                var current = FS.root;\n                var current_path = \"/\";\n                for(var i = 0; i < parts.length; i++){\n                    var islast = i === parts.length - 1;\n                    if (islast && opts.parent) break;\n                    current = FS.lookupNode(current, parts[i]);\n                    current_path = PATH.join2(current_path, parts[i]);\n                    if (FS.isMountpoint(current)) {\n                        if (!islast || islast && opts.follow_mount) current = current.mounted.root;\n                    }\n                    if (!islast || opts.follow) {\n                        var count = 0;\n                        while(FS.isLink(current.mode)){\n                            var link = FS.readlink(current_path);\n                            current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n                            var lookup = FS.lookupPath(current_path, {\n                                recurse_count: opts.recurse_count + 1\n                            });\n                            current = lookup.node;\n                            if (count++ > 40) throw new FS.ErrnoError(32);\n                        }\n                    }\n                }\n                return {\n                    path: current_path,\n                    node: current\n                };\n            },\n            getPath (node) {\n                var path;\n                while(true){\n                    if (FS.isRoot(node)) {\n                        var mount = node.mount.mountpoint;\n                        if (!path) return mount;\n                        return mount[mount.length - 1] !== \"/\" ? `${mount}/${path}` : mount + path;\n                    }\n                    path = path ? `${node.name}/${path}` : node.name;\n                    node = node.parent;\n                }\n            },\n            hashName (parentid, name) {\n                var hash = 0;\n                for(var i = 0; i < name.length; i++)hash = (hash << 5) - hash + name.charCodeAt(i) | 0;\n                return (parentid + hash >>> 0) % FS.nameTable.length;\n            },\n            hashAddNode (node) {\n                var hash = FS.hashName(node.parent.id, node.name);\n                node.name_next = FS.nameTable[hash];\n                FS.nameTable[hash] = node;\n            },\n            hashRemoveNode (node) {\n                var hash = FS.hashName(node.parent.id, node.name);\n                if (FS.nameTable[hash] === node) FS.nameTable[hash] = node.name_next;\n                else {\n                    var current = FS.nameTable[hash];\n                    while(current){\n                        if (current.name_next === node) {\n                            current.name_next = node.name_next;\n                            break;\n                        }\n                        current = current.name_next;\n                    }\n                }\n            },\n            lookupNode (parent, name) {\n                var errCode = FS.mayLookup(parent);\n                if (errCode) throw new FS.ErrnoError(errCode, parent);\n                var hash = FS.hashName(parent.id, name);\n                for(var node = FS.nameTable[hash]; node; node = node.name_next){\n                    var nodeName = node.name;\n                    if (node.parent.id === parent.id && nodeName === name) return node;\n                }\n                return FS.lookup(parent, name);\n            },\n            createNode (parent, name, mode, rdev) {\n                var node = new FS.FSNode(parent, name, mode, rdev);\n                FS.hashAddNode(node);\n                return node;\n            },\n            destroyNode (node) {\n                FS.hashRemoveNode(node);\n            },\n            isRoot (node) {\n                return node === node.parent;\n            },\n            isMountpoint (node) {\n                return !!node.mounted;\n            },\n            isFile (mode) {\n                return (mode & 61440) === 32768;\n            },\n            isDir (mode) {\n                return (mode & 61440) === 16384;\n            },\n            isLink (mode) {\n                return (mode & 61440) === 40960;\n            },\n            isChrdev (mode) {\n                return (mode & 61440) === 8192;\n            },\n            isBlkdev (mode) {\n                return (mode & 61440) === 24576;\n            },\n            isFIFO (mode) {\n                return (mode & 61440) === 4096;\n            },\n            isSocket (mode) {\n                return (mode & 49152) === 49152;\n            },\n            flagsToPermissionString (flag) {\n                var perms = [\n                    \"r\",\n                    \"w\",\n                    \"rw\"\n                ][flag & 3];\n                if (flag & 512) perms += \"w\";\n                return perms;\n            },\n            nodePermissions (node, perms) {\n                if (FS.ignorePermissions) return 0;\n                if (perms.includes(\"r\") && !(node.mode & 292)) return 2;\n                else if (perms.includes(\"w\") && !(node.mode & 146)) return 2;\n                else if (perms.includes(\"x\") && !(node.mode & 73)) return 2;\n                return 0;\n            },\n            mayLookup (dir) {\n                var errCode = FS.nodePermissions(dir, \"x\");\n                if (errCode) return errCode;\n                if (!dir.node_ops.lookup) return 2;\n                return 0;\n            },\n            mayCreate (dir, name) {\n                try {\n                    var node = FS.lookupNode(dir, name);\n                    return 20;\n                } catch (e) {}\n                return FS.nodePermissions(dir, \"wx\");\n            },\n            mayDelete (dir, name, isdir) {\n                var node;\n                try {\n                    node = FS.lookupNode(dir, name);\n                } catch (e) {\n                    return e.errno;\n                }\n                var errCode = FS.nodePermissions(dir, \"wx\");\n                if (errCode) return errCode;\n                if (isdir) {\n                    if (!FS.isDir(node.mode)) return 54;\n                    if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) return 10;\n                } else {\n                    if (FS.isDir(node.mode)) return 31;\n                }\n                return 0;\n            },\n            mayOpen (node, flags) {\n                if (!node) return 44;\n                if (FS.isLink(node.mode)) return 32;\n                else if (FS.isDir(node.mode)) {\n                    if (FS.flagsToPermissionString(flags) !== \"r\" || flags & 512) return 31;\n                }\n                return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n            },\n            MAX_OPEN_FDS: 4096,\n            nextfd () {\n                for(var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++){\n                    if (!FS.streams[fd]) return fd;\n                }\n                throw new FS.ErrnoError(33);\n            },\n            getStreamChecked (fd) {\n                var stream = FS.getStream(fd);\n                if (!stream) throw new FS.ErrnoError(8);\n                return stream;\n            },\n            getStream: (fd)=>FS.streams[fd],\n            createStream (stream, fd = -1) {\n                if (!FS.FSStream) {\n                    FS.FSStream = function() {\n                        this.shared = {};\n                    };\n                    FS.FSStream.prototype = {};\n                    Object.defineProperties(FS.FSStream.prototype, {\n                        object: {\n                            get () {\n                                return this.node;\n                            },\n                            set (val) {\n                                this.node = val;\n                            }\n                        },\n                        isRead: {\n                            get () {\n                                return (this.flags & 2097155) !== 1;\n                            }\n                        },\n                        isWrite: {\n                            get () {\n                                return (this.flags & 2097155) !== 0;\n                            }\n                        },\n                        isAppend: {\n                            get () {\n                                return this.flags & 1024;\n                            }\n                        },\n                        flags: {\n                            get () {\n                                return this.shared.flags;\n                            },\n                            set (val) {\n                                this.shared.flags = val;\n                            }\n                        },\n                        position: {\n                            get () {\n                                return this.shared.position;\n                            },\n                            set (val) {\n                                this.shared.position = val;\n                            }\n                        }\n                    });\n                }\n                stream = Object.assign(new FS.FSStream, stream);\n                if (fd == -1) fd = FS.nextfd();\n                stream.fd = fd;\n                FS.streams[fd] = stream;\n                return stream;\n            },\n            closeStream (fd) {\n                FS.streams[fd] = null;\n            },\n            chrdev_stream_ops: {\n                open (stream) {\n                    var device = FS.getDevice(stream.node.rdev);\n                    stream.stream_ops = device.stream_ops;\n                    if (stream.stream_ops.open) stream.stream_ops.open(stream);\n                },\n                llseek () {\n                    throw new FS.ErrnoError(70);\n                }\n            },\n            major: (dev)=>dev >> 8,\n            minor: (dev)=>dev & 255,\n            makedev: (ma, mi)=>ma << 8 | mi,\n            registerDevice (dev, ops) {\n                FS.devices[dev] = {\n                    stream_ops: ops\n                };\n            },\n            getDevice: (dev)=>FS.devices[dev],\n            getMounts (mount) {\n                var mounts = [];\n                var check = [\n                    mount\n                ];\n                while(check.length){\n                    var m = check.pop();\n                    mounts.push(m);\n                    check.push.apply(check, m.mounts);\n                }\n                return mounts;\n            },\n            syncfs (populate, callback) {\n                if (typeof populate == \"function\") {\n                    callback = populate;\n                    populate = false;\n                }\n                FS.syncFSRequests++;\n                if (FS.syncFSRequests > 1) err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);\n                var mounts = FS.getMounts(FS.root.mount);\n                var completed = 0;\n                function doCallback(errCode) {\n                    FS.syncFSRequests--;\n                    return callback(errCode);\n                }\n                function done(errCode) {\n                    if (errCode) {\n                        if (!done.errored) {\n                            done.errored = true;\n                            return doCallback(errCode);\n                        }\n                        return;\n                    }\n                    if (++completed >= mounts.length) doCallback(null);\n                }\n                mounts.forEach((mount)=>{\n                    if (!mount.type.syncfs) return done(null);\n                    mount.type.syncfs(mount, populate, done);\n                });\n            },\n            mount (type, opts, mountpoint) {\n                var root = mountpoint === \"/\";\n                var pseudo = !mountpoint;\n                var node;\n                if (root && FS.root) throw new FS.ErrnoError(10);\n                else if (!root && !pseudo) {\n                    var lookup = FS.lookupPath(mountpoint, {\n                        follow_mount: false\n                    });\n                    mountpoint = lookup.path;\n                    node = lookup.node;\n                    if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);\n                    if (!FS.isDir(node.mode)) throw new FS.ErrnoError(54);\n                }\n                var mount = {\n                    type: type,\n                    opts: opts,\n                    mountpoint: mountpoint,\n                    mounts: []\n                };\n                var mountRoot = type.mount(mount);\n                mountRoot.mount = mount;\n                mount.root = mountRoot;\n                if (root) FS.root = mountRoot;\n                else if (node) {\n                    node.mounted = mount;\n                    if (node.mount) node.mount.mounts.push(mount);\n                }\n                return mountRoot;\n            },\n            unmount (mountpoint) {\n                var lookup = FS.lookupPath(mountpoint, {\n                    follow_mount: false\n                });\n                if (!FS.isMountpoint(lookup.node)) throw new FS.ErrnoError(28);\n                var node = lookup.node;\n                var mount = node.mounted;\n                var mounts = FS.getMounts(mount);\n                Object.keys(FS.nameTable).forEach((hash)=>{\n                    var current = FS.nameTable[hash];\n                    while(current){\n                        var next = current.name_next;\n                        if (mounts.includes(current.mount)) FS.destroyNode(current);\n                        current = next;\n                    }\n                });\n                node.mounted = null;\n                var idx = node.mount.mounts.indexOf(mount);\n                node.mount.mounts.splice(idx, 1);\n            },\n            lookup (parent, name) {\n                return parent.node_ops.lookup(parent, name);\n            },\n            mknod (path, mode, dev) {\n                var lookup = FS.lookupPath(path, {\n                    parent: true\n                });\n                var parent = lookup.node;\n                var name = PATH.basename(path);\n                if (!name || name === \".\" || name === \"..\") throw new FS.ErrnoError(28);\n                var errCode = FS.mayCreate(parent, name);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                if (!parent.node_ops.mknod) throw new FS.ErrnoError(63);\n                return parent.node_ops.mknod(parent, name, mode, dev);\n            },\n            create (path, mode) {\n                mode = mode !== undefined ? mode : 438;\n                mode &= 4095;\n                mode |= 32768;\n                return FS.mknod(path, mode, 0);\n            },\n            mkdir (path, mode) {\n                mode = mode !== undefined ? mode : 511;\n                mode &= 1023;\n                mode |= 16384;\n                return FS.mknod(path, mode, 0);\n            },\n            mkdirTree (path, mode) {\n                var dirs = path.split(\"/\");\n                var d = \"\";\n                for(var i = 0; i < dirs.length; ++i){\n                    if (!dirs[i]) continue;\n                    d += \"/\" + dirs[i];\n                    try {\n                        FS.mkdir(d, mode);\n                    } catch (e) {\n                        if (e.errno != 20) throw e;\n                    }\n                }\n            },\n            mkdev (path, mode, dev) {\n                if (typeof dev == \"undefined\") {\n                    dev = mode;\n                    mode = 438;\n                }\n                mode |= 8192;\n                return FS.mknod(path, mode, dev);\n            },\n            symlink (oldpath, newpath) {\n                if (!PATH_FS.resolve(oldpath)) throw new FS.ErrnoError(44);\n                var lookup = FS.lookupPath(newpath, {\n                    parent: true\n                });\n                var parent = lookup.node;\n                if (!parent) throw new FS.ErrnoError(44);\n                var newname = PATH.basename(newpath);\n                var errCode = FS.mayCreate(parent, newname);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                if (!parent.node_ops.symlink) throw new FS.ErrnoError(63);\n                return parent.node_ops.symlink(parent, newname, oldpath);\n            },\n            rename (old_path, new_path) {\n                var old_dirname = PATH.dirname(old_path);\n                var new_dirname = PATH.dirname(new_path);\n                var old_name = PATH.basename(old_path);\n                var new_name = PATH.basename(new_path);\n                var lookup, old_dir, new_dir;\n                lookup = FS.lookupPath(old_path, {\n                    parent: true\n                });\n                old_dir = lookup.node;\n                lookup = FS.lookupPath(new_path, {\n                    parent: true\n                });\n                new_dir = lookup.node;\n                if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n                if (old_dir.mount !== new_dir.mount) throw new FS.ErrnoError(75);\n                var old_node = FS.lookupNode(old_dir, old_name);\n                var relative = PATH_FS.relative(old_path, new_dirname);\n                if (relative.charAt(0) !== \".\") throw new FS.ErrnoError(28);\n                relative = PATH_FS.relative(new_path, old_dirname);\n                if (relative.charAt(0) !== \".\") throw new FS.ErrnoError(55);\n                var new_node;\n                try {\n                    new_node = FS.lookupNode(new_dir, new_name);\n                } catch (e) {}\n                if (old_node === new_node) return;\n                var isdir = FS.isDir(old_node.mode);\n                var errCode = FS.mayDelete(old_dir, old_name, isdir);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                if (!old_dir.node_ops.rename) throw new FS.ErrnoError(63);\n                if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) throw new FS.ErrnoError(10);\n                if (new_dir !== old_dir) {\n                    errCode = FS.nodePermissions(old_dir, \"w\");\n                    if (errCode) throw new FS.ErrnoError(errCode);\n                }\n                FS.hashRemoveNode(old_node);\n                try {\n                    old_dir.node_ops.rename(old_node, new_dir, new_name);\n                } catch (e) {\n                    throw e;\n                } finally{\n                    FS.hashAddNode(old_node);\n                }\n            },\n            rmdir (path) {\n                var lookup = FS.lookupPath(path, {\n                    parent: true\n                });\n                var parent = lookup.node;\n                var name = PATH.basename(path);\n                var node = FS.lookupNode(parent, name);\n                var errCode = FS.mayDelete(parent, name, true);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                if (!parent.node_ops.rmdir) throw new FS.ErrnoError(63);\n                if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);\n                parent.node_ops.rmdir(parent, name);\n                FS.destroyNode(node);\n            },\n            readdir (path) {\n                var lookup = FS.lookupPath(path, {\n                    follow: true\n                });\n                var node = lookup.node;\n                if (!node.node_ops.readdir) throw new FS.ErrnoError(54);\n                return node.node_ops.readdir(node);\n            },\n            unlink (path) {\n                var lookup = FS.lookupPath(path, {\n                    parent: true\n                });\n                var parent = lookup.node;\n                if (!parent) throw new FS.ErrnoError(44);\n                var name = PATH.basename(path);\n                var node = FS.lookupNode(parent, name);\n                var errCode = FS.mayDelete(parent, name, false);\n                if (errCode) throw new FS.ErrnoError(errCode);\n                if (!parent.node_ops.unlink) throw new FS.ErrnoError(63);\n                if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);\n                parent.node_ops.unlink(parent, name);\n                FS.destroyNode(node);\n            },\n            readlink (path) {\n                var lookup = FS.lookupPath(path);\n                var link = lookup.node;\n                if (!link) throw new FS.ErrnoError(44);\n                if (!link.node_ops.readlink) throw new FS.ErrnoError(28);\n                return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n            },\n            stat (path, dontFollow) {\n                var lookup = FS.lookupPath(path, {\n                    follow: !dontFollow\n                });\n                var node = lookup.node;\n                if (!node) throw new FS.ErrnoError(44);\n                if (!node.node_ops.getattr) throw new FS.ErrnoError(63);\n                return node.node_ops.getattr(node);\n            },\n            lstat (path) {\n                return FS.stat(path, true);\n            },\n            chmod (path, mode, dontFollow) {\n                var node;\n                if (typeof path == \"string\") {\n                    var lookup = FS.lookupPath(path, {\n                        follow: !dontFollow\n                    });\n                    node = lookup.node;\n                } else node = path;\n                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);\n                node.node_ops.setattr(node, {\n                    mode: mode & 4095 | node.mode & -4096,\n                    timestamp: Date.now()\n                });\n            },\n            lchmod (path, mode) {\n                FS.chmod(path, mode, true);\n            },\n            fchmod (fd, mode) {\n                var stream = FS.getStreamChecked(fd);\n                FS.chmod(stream.node, mode);\n            },\n            chown (path, uid, gid, dontFollow) {\n                var node;\n                if (typeof path == \"string\") {\n                    var lookup = FS.lookupPath(path, {\n                        follow: !dontFollow\n                    });\n                    node = lookup.node;\n                } else node = path;\n                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);\n                node.node_ops.setattr(node, {\n                    timestamp: Date.now()\n                });\n            },\n            lchown (path, uid, gid) {\n                FS.chown(path, uid, gid, true);\n            },\n            fchown (fd, uid, gid) {\n                var stream = FS.getStreamChecked(fd);\n                FS.chown(stream.node, uid, gid);\n            },\n            truncate (path, len) {\n                if (len < 0) throw new FS.ErrnoError(28);\n                var node;\n                if (typeof path == \"string\") {\n                    var lookup = FS.lookupPath(path, {\n                        follow: true\n                    });\n                    node = lookup.node;\n                } else node = path;\n                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);\n                if (FS.isDir(node.mode)) throw new FS.ErrnoError(31);\n                if (!FS.isFile(node.mode)) throw new FS.ErrnoError(28);\n                var errCode = FS.nodePermissions(node, \"w\");\n                if (errCode) throw new FS.ErrnoError(errCode);\n                node.node_ops.setattr(node, {\n                    size: len,\n                    timestamp: Date.now()\n                });\n            },\n            ftruncate (fd, len) {\n                var stream = FS.getStreamChecked(fd);\n                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(28);\n                FS.truncate(stream.node, len);\n            },\n            utime (path, atime, mtime) {\n                var lookup = FS.lookupPath(path, {\n                    follow: true\n                });\n                var node = lookup.node;\n                node.node_ops.setattr(node, {\n                    timestamp: Math.max(atime, mtime)\n                });\n            },\n            open (path, flags, mode) {\n                if (path === \"\") throw new FS.ErrnoError(44);\n                flags = typeof flags == \"string\" ? FS_modeStringToFlags(flags) : flags;\n                mode = typeof mode == \"undefined\" ? 438 : mode;\n                if (flags & 64) mode = mode & 4095 | 32768;\n                else mode = 0;\n                var node;\n                if (typeof path == \"object\") node = path;\n                else {\n                    path = PATH.normalize(path);\n                    try {\n                        var lookup = FS.lookupPath(path, {\n                            follow: !(flags & 131072)\n                        });\n                        node = lookup.node;\n                    } catch (e) {}\n                }\n                var created = false;\n                if (flags & 64) {\n                    if (node) {\n                        if (flags & 128) throw new FS.ErrnoError(20);\n                    } else {\n                        node = FS.mknod(path, mode, 0);\n                        created = true;\n                    }\n                }\n                if (!node) throw new FS.ErrnoError(44);\n                if (FS.isChrdev(node.mode)) flags &= -513;\n                if (flags & 65536 && !FS.isDir(node.mode)) throw new FS.ErrnoError(54);\n                if (!created) {\n                    var errCode = FS.mayOpen(node, flags);\n                    if (errCode) throw new FS.ErrnoError(errCode);\n                }\n                if (flags & 512 && !created) FS.truncate(node, 0);\n                flags &= -131713;\n                var stream = FS.createStream({\n                    node: node,\n                    path: FS.getPath(node),\n                    flags: flags,\n                    seekable: true,\n                    position: 0,\n                    stream_ops: node.stream_ops,\n                    ungotten: [],\n                    error: false\n                });\n                if (stream.stream_ops.open) stream.stream_ops.open(stream);\n                if (Module[\"logReadFiles\"] && !(flags & 1)) {\n                    if (!FS.readFiles) FS.readFiles = {};\n                    if (!(path in FS.readFiles)) FS.readFiles[path] = 1;\n                }\n                return stream;\n            },\n            close (stream) {\n                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);\n                if (stream.getdents) stream.getdents = null;\n                try {\n                    if (stream.stream_ops.close) stream.stream_ops.close(stream);\n                } catch (e) {\n                    throw e;\n                } finally{\n                    FS.closeStream(stream.fd);\n                }\n                stream.fd = null;\n            },\n            isClosed (stream) {\n                return stream.fd === null;\n            },\n            llseek (stream, offset, whence) {\n                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);\n                if (!stream.seekable || !stream.stream_ops.llseek) throw new FS.ErrnoError(70);\n                if (whence != 0 && whence != 1 && whence != 2) throw new FS.ErrnoError(28);\n                stream.position = stream.stream_ops.llseek(stream, offset, whence);\n                stream.ungotten = [];\n                return stream.position;\n            },\n            read (stream, buffer, offset, length, position) {\n                if (length < 0 || position < 0) throw new FS.ErrnoError(28);\n                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);\n                if ((stream.flags & 2097155) === 1) throw new FS.ErrnoError(8);\n                if (FS.isDir(stream.node.mode)) throw new FS.ErrnoError(31);\n                if (!stream.stream_ops.read) throw new FS.ErrnoError(28);\n                var seeking = typeof position != \"undefined\";\n                if (!seeking) position = stream.position;\n                else if (!stream.seekable) throw new FS.ErrnoError(70);\n                var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n                if (!seeking) stream.position += bytesRead;\n                return bytesRead;\n            },\n            write (stream, buffer, offset, length, position, canOwn) {\n                if (length < 0 || position < 0) throw new FS.ErrnoError(28);\n                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);\n                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(8);\n                if (FS.isDir(stream.node.mode)) throw new FS.ErrnoError(31);\n                if (!stream.stream_ops.write) throw new FS.ErrnoError(28);\n                if (stream.seekable && stream.flags & 1024) FS.llseek(stream, 0, 2);\n                var seeking = typeof position != \"undefined\";\n                if (!seeking) position = stream.position;\n                else if (!stream.seekable) throw new FS.ErrnoError(70);\n                var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n                if (!seeking) stream.position += bytesWritten;\n                return bytesWritten;\n            },\n            allocate (stream, offset, length) {\n                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);\n                if (offset < 0 || length <= 0) throw new FS.ErrnoError(28);\n                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(8);\n                if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) throw new FS.ErrnoError(43);\n                if (!stream.stream_ops.allocate) throw new FS.ErrnoError(138);\n                stream.stream_ops.allocate(stream, offset, length);\n            },\n            mmap (stream, length, position, prot, flags) {\n                if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) throw new FS.ErrnoError(2);\n                if ((stream.flags & 2097155) === 1) throw new FS.ErrnoError(2);\n                if (!stream.stream_ops.mmap) throw new FS.ErrnoError(43);\n                return stream.stream_ops.mmap(stream, length, position, prot, flags);\n            },\n            msync (stream, buffer, offset, length, mmapFlags) {\n                if (!stream.stream_ops.msync) return 0;\n                return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n            },\n            munmap: (stream)=>0,\n            ioctl (stream, cmd, arg) {\n                if (!stream.stream_ops.ioctl) throw new FS.ErrnoError(59);\n                return stream.stream_ops.ioctl(stream, cmd, arg);\n            },\n            readFile (path, opts = {}) {\n                opts.flags = opts.flags || 0;\n                opts.encoding = opts.encoding || \"binary\";\n                if (opts.encoding !== \"utf8\" && opts.encoding !== \"binary\") throw new Error(`Invalid encoding type \"${opts.encoding}\"`);\n                var ret;\n                var stream = FS.open(path, opts.flags);\n                var stat = FS.stat(path);\n                var length = stat.size;\n                var buf = new Uint8Array(length);\n                FS.read(stream, buf, 0, length, 0);\n                if (opts.encoding === \"utf8\") ret = UTF8ArrayToString(buf, 0);\n                else if (opts.encoding === \"binary\") ret = buf;\n                FS.close(stream);\n                return ret;\n            },\n            writeFile (path, data, opts = {}) {\n                opts.flags = opts.flags || 577;\n                var stream = FS.open(path, opts.flags, opts.mode);\n                if (typeof data == \"string\") {\n                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n                    FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n                } else if (ArrayBuffer.isView(data)) FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n                else throw new Error(\"Unsupported data type\");\n                FS.close(stream);\n            },\n            cwd: ()=>FS.currentPath,\n            chdir (path) {\n                var lookup = FS.lookupPath(path, {\n                    follow: true\n                });\n                if (lookup.node === null) throw new FS.ErrnoError(44);\n                if (!FS.isDir(lookup.node.mode)) throw new FS.ErrnoError(54);\n                var errCode = FS.nodePermissions(lookup.node, \"x\");\n                if (errCode) throw new FS.ErrnoError(errCode);\n                FS.currentPath = lookup.path;\n            },\n            createDefaultDirectories () {\n                FS.mkdir(\"/tmp\");\n                FS.mkdir(\"/home\");\n                FS.mkdir(\"/home/web_user\");\n            },\n            createDefaultDevices () {\n                FS.mkdir(\"/dev\");\n                FS.registerDevice(FS.makedev(1, 3), {\n                    read: ()=>0,\n                    write: (stream, buffer, offset, length, pos)=>length\n                });\n                FS.mkdev(\"/dev/null\", FS.makedev(1, 3));\n                TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n                TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n                FS.mkdev(\"/dev/tty\", FS.makedev(5, 0));\n                FS.mkdev(\"/dev/tty1\", FS.makedev(6, 0));\n                var randomBuffer = new Uint8Array(1024), randomLeft = 0;\n                var randomByte = ()=>{\n                    if (randomLeft === 0) randomLeft = randomFill(randomBuffer).byteLength;\n                    return randomBuffer[--randomLeft];\n                };\n                FS.createDevice(\"/dev\", \"random\", randomByte);\n                FS.createDevice(\"/dev\", \"urandom\", randomByte);\n                FS.mkdir(\"/dev/shm\");\n                FS.mkdir(\"/dev/shm/tmp\");\n            },\n            createSpecialDirectories () {\n                FS.mkdir(\"/proc\");\n                var proc_self = FS.mkdir(\"/proc/self\");\n                FS.mkdir(\"/proc/self/fd\");\n                FS.mount({\n                    mount () {\n                        var node = FS.createNode(proc_self, \"fd\", 16895, 73);\n                        node.node_ops = {\n                            lookup (parent, name) {\n                                var fd = +name;\n                                var stream = FS.getStreamChecked(fd);\n                                var ret = {\n                                    parent: null,\n                                    mount: {\n                                        mountpoint: \"fake\"\n                                    },\n                                    node_ops: {\n                                        readlink: ()=>stream.path\n                                    }\n                                };\n                                ret.parent = ret;\n                                return ret;\n                            }\n                        };\n                        return node;\n                    }\n                }, {}, \"/proc/self/fd\");\n            },\n            createStandardStreams () {\n                if (Module[\"stdin\"]) FS.createDevice(\"/dev\", \"stdin\", Module[\"stdin\"]);\n                else FS.symlink(\"/dev/tty\", \"/dev/stdin\");\n                if (Module[\"stdout\"]) FS.createDevice(\"/dev\", \"stdout\", null, Module[\"stdout\"]);\n                else FS.symlink(\"/dev/tty\", \"/dev/stdout\");\n                if (Module[\"stderr\"]) FS.createDevice(\"/dev\", \"stderr\", null, Module[\"stderr\"]);\n                else FS.symlink(\"/dev/tty1\", \"/dev/stderr\");\n                var stdin = FS.open(\"/dev/stdin\", 0);\n                var stdout = FS.open(\"/dev/stdout\", 1);\n                var stderr = FS.open(\"/dev/stderr\", 1);\n            },\n            ensureErrnoError () {\n                if (FS.ErrnoError) return;\n                FS.ErrnoError = function ErrnoError(errno, node) {\n                    this.name = \"ErrnoError\";\n                    this.node = node;\n                    this.setErrno = function(errno) {\n                        this.errno = errno;\n                    };\n                    this.setErrno(errno);\n                    this.message = \"FS error\";\n                };\n                FS.ErrnoError.prototype = new Error;\n                FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n                [\n                    44\n                ].forEach((code)=>{\n                    FS.genericErrors[code] = new FS.ErrnoError(code);\n                    FS.genericErrors[code].stack = \"<generic error, no stack>\";\n                });\n            },\n            staticInit () {\n                FS.ensureErrnoError();\n                FS.nameTable = new Array(4096);\n                FS.mount(MEMFS, {}, \"/\");\n                FS.createDefaultDirectories();\n                FS.createDefaultDevices();\n                FS.createSpecialDirectories();\n                FS.filesystems = {\n                    \"MEMFS\": MEMFS\n                };\n            },\n            init (input, output, error) {\n                FS.init.initialized = true;\n                FS.ensureErrnoError();\n                Module[\"stdin\"] = input || Module[\"stdin\"];\n                Module[\"stdout\"] = output || Module[\"stdout\"];\n                Module[\"stderr\"] = error || Module[\"stderr\"];\n                FS.createStandardStreams();\n            },\n            quit () {\n                FS.init.initialized = false;\n                for(var i = 0; i < FS.streams.length; i++){\n                    var stream = FS.streams[i];\n                    if (!stream) continue;\n                    FS.close(stream);\n                }\n            },\n            findObject (path, dontResolveLastLink) {\n                var ret = FS.analyzePath(path, dontResolveLastLink);\n                if (!ret.exists) return null;\n                return ret.object;\n            },\n            analyzePath (path, dontResolveLastLink) {\n                try {\n                    var lookup = FS.lookupPath(path, {\n                        follow: !dontResolveLastLink\n                    });\n                    path = lookup.path;\n                } catch (e) {}\n                var ret = {\n                    isRoot: false,\n                    exists: false,\n                    error: 0,\n                    name: null,\n                    path: null,\n                    object: null,\n                    parentExists: false,\n                    parentPath: null,\n                    parentObject: null\n                };\n                try {\n                    var lookup = FS.lookupPath(path, {\n                        parent: true\n                    });\n                    ret.parentExists = true;\n                    ret.parentPath = lookup.path;\n                    ret.parentObject = lookup.node;\n                    ret.name = PATH.basename(path);\n                    lookup = FS.lookupPath(path, {\n                        follow: !dontResolveLastLink\n                    });\n                    ret.exists = true;\n                    ret.path = lookup.path;\n                    ret.object = lookup.node;\n                    ret.name = lookup.node.name;\n                    ret.isRoot = lookup.path === \"/\";\n                } catch (e) {\n                    ret.error = e.errno;\n                }\n                return ret;\n            },\n            createPath (parent, path, canRead, canWrite) {\n                parent = typeof parent == \"string\" ? parent : FS.getPath(parent);\n                var parts = path.split(\"/\").reverse();\n                while(parts.length){\n                    var part = parts.pop();\n                    if (!part) continue;\n                    var current = PATH.join2(parent, part);\n                    try {\n                        FS.mkdir(current);\n                    } catch (e) {}\n                    parent = current;\n                }\n                return current;\n            },\n            createFile (parent, name, properties, canRead, canWrite) {\n                var path = PATH.join2(typeof parent == \"string\" ? parent : FS.getPath(parent), name);\n                var mode = FS_getMode(canRead, canWrite);\n                return FS.create(path, mode);\n            },\n            createDataFile (parent, name, data, canRead, canWrite, canOwn) {\n                var path = name;\n                if (parent) {\n                    parent = typeof parent == \"string\" ? parent : FS.getPath(parent);\n                    path = name ? PATH.join2(parent, name) : parent;\n                }\n                var mode = FS_getMode(canRead, canWrite);\n                var node = FS.create(path, mode);\n                if (data) {\n                    if (typeof data == \"string\") {\n                        var arr = new Array(data.length);\n                        for(var i = 0, len = data.length; i < len; ++i)arr[i] = data.charCodeAt(i);\n                        data = arr;\n                    }\n                    FS.chmod(node, mode | 146);\n                    var stream = FS.open(node, 577);\n                    FS.write(stream, data, 0, data.length, 0, canOwn);\n                    FS.close(stream);\n                    FS.chmod(node, mode);\n                }\n                return node;\n            },\n            createDevice (parent, name, input, output) {\n                var path = PATH.join2(typeof parent == \"string\" ? parent : FS.getPath(parent), name);\n                var mode = FS_getMode(!!input, !!output);\n                if (!FS.createDevice.major) FS.createDevice.major = 64;\n                var dev = FS.makedev(FS.createDevice.major++, 0);\n                FS.registerDevice(dev, {\n                    open (stream) {\n                        stream.seekable = false;\n                    },\n                    close (stream) {\n                        if (output && output.buffer && output.buffer.length) output(10);\n                    },\n                    read (stream, buffer, offset, length, pos) {\n                        var bytesRead = 0;\n                        for(var i = 0; i < length; i++){\n                            var result;\n                            try {\n                                result = input();\n                            } catch (e) {\n                                throw new FS.ErrnoError(29);\n                            }\n                            if (result === undefined && bytesRead === 0) throw new FS.ErrnoError(6);\n                            if (result === null || result === undefined) break;\n                            bytesRead++;\n                            buffer[offset + i] = result;\n                        }\n                        if (bytesRead) stream.node.timestamp = Date.now();\n                        return bytesRead;\n                    },\n                    write (stream, buffer, offset, length, pos) {\n                        for(var i = 0; i < length; i++)try {\n                            output(buffer[offset + i]);\n                        } catch (e) {\n                            throw new FS.ErrnoError(29);\n                        }\n                        if (length) stream.node.timestamp = Date.now();\n                        return i;\n                    }\n                });\n                return FS.mkdev(path, mode, dev);\n            },\n            forceLoadFile (obj) {\n                if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n                if (typeof XMLHttpRequest != \"undefined\") throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n                else if (read_) try {\n                    obj.contents = intArrayFromString(read_(obj.url), true);\n                    obj.usedBytes = obj.contents.length;\n                } catch (e) {\n                    throw new FS.ErrnoError(29);\n                }\n                else throw new Error(\"Cannot load without read() or XMLHttpRequest.\");\n            },\n            createLazyFile (parent, name, url, canRead, canWrite) {\n                function LazyUint8Array() {\n                    this.lengthKnown = false;\n                    this.chunks = [];\n                }\n                LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {\n                    if (idx > this.length - 1 || idx < 0) return undefined;\n                    var chunkOffset = idx % this.chunkSize;\n                    var chunkNum = idx / this.chunkSize | 0;\n                    return this.getter(chunkNum)[chunkOffset];\n                };\n                LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n                    this.getter = getter;\n                };\n                LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n                    var xhr = new XMLHttpRequest;\n                    xhr.open(\"HEAD\", url, false);\n                    xhr.send(null);\n                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n                    var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n                    var header;\n                    var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n                    var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n                    var chunkSize = 1048576;\n                    if (!hasByteServing) chunkSize = datalength;\n                    var doXHR = (from, to)=>{\n                        if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n                        if (to > datalength - 1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n                        var xhr = new XMLHttpRequest;\n                        xhr.open(\"GET\", url, false);\n                        if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n                        xhr.responseType = \"arraybuffer\";\n                        if (xhr.overrideMimeType) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n                        xhr.send(null);\n                        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n                        if (xhr.response !== undefined) return new Uint8Array(xhr.response || []);\n                        return intArrayFromString(xhr.responseText || \"\", true);\n                    };\n                    var lazyArray = this;\n                    lazyArray.setDataGetter((chunkNum)=>{\n                        var start = chunkNum * chunkSize;\n                        var end = (chunkNum + 1) * chunkSize - 1;\n                        end = Math.min(end, datalength - 1);\n                        if (typeof lazyArray.chunks[chunkNum] == \"undefined\") lazyArray.chunks[chunkNum] = doXHR(start, end);\n                        if (typeof lazyArray.chunks[chunkNum] == \"undefined\") throw new Error(\"doXHR failed!\");\n                        return lazyArray.chunks[chunkNum];\n                    });\n                    if (usesGzip || !datalength) {\n                        chunkSize = datalength = 1;\n                        datalength = this.getter(0).length;\n                        chunkSize = datalength;\n                        out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n                    }\n                    this._length = datalength;\n                    this._chunkSize = chunkSize;\n                    this.lengthKnown = true;\n                };\n                if (typeof XMLHttpRequest != \"undefined\") {\n                    if (!ENVIRONMENT_IS_WORKER) throw \"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";\n                    var lazyArray = new LazyUint8Array;\n                    Object.defineProperties(lazyArray, {\n                        length: {\n                            get: function() {\n                                if (!this.lengthKnown) this.cacheLength();\n                                return this._length;\n                            }\n                        },\n                        chunkSize: {\n                            get: function() {\n                                if (!this.lengthKnown) this.cacheLength();\n                                return this._chunkSize;\n                            }\n                        }\n                    });\n                    var properties = {\n                        isDevice: false,\n                        contents: lazyArray\n                    };\n                } else var properties = {\n                    isDevice: false,\n                    url: url\n                };\n                var node = FS.createFile(parent, name, properties, canRead, canWrite);\n                if (properties.contents) node.contents = properties.contents;\n                else if (properties.url) {\n                    node.contents = null;\n                    node.url = properties.url;\n                }\n                Object.defineProperties(node, {\n                    usedBytes: {\n                        get: function() {\n                            return this.contents.length;\n                        }\n                    }\n                });\n                var stream_ops = {};\n                var keys = Object.keys(node.stream_ops);\n                keys.forEach((key)=>{\n                    var fn = node.stream_ops[key];\n                    stream_ops[key] = function forceLoadLazyFile() {\n                        FS.forceLoadFile(node);\n                        return fn.apply(null, arguments);\n                    };\n                });\n                function writeChunks(stream, buffer, offset, length, position) {\n                    var contents = stream.node.contents;\n                    if (position >= contents.length) return 0;\n                    var size = Math.min(contents.length - position, length);\n                    if (contents.slice) for(var i = 0; i < size; i++)buffer[offset + i] = contents[position + i];\n                    else for(var i = 0; i < size; i++)buffer[offset + i] = contents.get(position + i);\n                    return size;\n                }\n                stream_ops.read = (stream, buffer, offset, length, position)=>{\n                    FS.forceLoadFile(node);\n                    return writeChunks(stream, buffer, offset, length, position);\n                };\n                stream_ops.mmap = (stream, length, position, prot, flags)=>{\n                    FS.forceLoadFile(node);\n                    var ptr = mmapAlloc(length);\n                    if (!ptr) throw new FS.ErrnoError(48);\n                    writeChunks(stream, HEAP8, ptr, length, position);\n                    return {\n                        ptr: ptr,\n                        allocated: true\n                    };\n                };\n                node.stream_ops = stream_ops;\n                return node;\n            }\n        };\n        var SYSCALLS = {\n            DEFAULT_POLLMASK: 5,\n            calculateAt (dirfd, path, allowEmpty) {\n                if (PATH.isAbs(path)) return path;\n                var dir;\n                if (dirfd === -100) dir = FS.cwd();\n                else {\n                    var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n                    dir = dirstream.path;\n                }\n                if (path.length == 0) {\n                    if (!allowEmpty) throw new FS.ErrnoError(44);\n                    return dir;\n                }\n                return PATH.join2(dir, path);\n            },\n            doStat (func, path, buf) {\n                try {\n                    var stat = func(path);\n                } catch (e) {\n                    if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) return -54;\n                    throw e;\n                }\n                HEAP32[buf >> 2] = stat.dev;\n                HEAP32[buf + 4 >> 2] = stat.mode;\n                HEAPU32[buf + 8 >> 2] = stat.nlink;\n                HEAP32[buf + 12 >> 2] = stat.uid;\n                HEAP32[buf + 16 >> 2] = stat.gid;\n                HEAP32[buf + 20 >> 2] = stat.rdev;\n                tempI64 = [\n                    stat.size >>> 0,\n                    (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[buf + 24 >> 2] = tempI64[0], HEAP32[buf + 28 >> 2] = tempI64[1];\n                HEAP32[buf + 32 >> 2] = 4096;\n                HEAP32[buf + 36 >> 2] = stat.blocks;\n                var atime = stat.atime.getTime();\n                var mtime = stat.mtime.getTime();\n                var ctime = stat.ctime.getTime();\n                tempI64 = [\n                    Math.floor(atime / 1e3) >>> 0,\n                    (tempDouble = Math.floor(atime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];\n                HEAPU32[buf + 48 >> 2] = atime % 1e3 * 1e3;\n                tempI64 = [\n                    Math.floor(mtime / 1e3) >>> 0,\n                    (tempDouble = Math.floor(mtime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[buf + 56 >> 2] = tempI64[0], HEAP32[buf + 60 >> 2] = tempI64[1];\n                HEAPU32[buf + 64 >> 2] = mtime % 1e3 * 1e3;\n                tempI64 = [\n                    Math.floor(ctime / 1e3) >>> 0,\n                    (tempDouble = Math.floor(ctime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[buf + 72 >> 2] = tempI64[0], HEAP32[buf + 76 >> 2] = tempI64[1];\n                HEAPU32[buf + 80 >> 2] = ctime % 1e3 * 1e3;\n                tempI64 = [\n                    stat.ino >>> 0,\n                    (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[buf + 88 >> 2] = tempI64[0], HEAP32[buf + 92 >> 2] = tempI64[1];\n                return 0;\n            },\n            doMsync (addr, stream, len, flags, offset) {\n                if (!FS.isFile(stream.node.mode)) throw new FS.ErrnoError(43);\n                if (flags & 2) return 0;\n                var buffer = HEAPU8.slice(addr, addr + len);\n                FS.msync(stream, buffer, offset, len, flags);\n            },\n            varargs: undefined,\n            get () {\n                var ret = HEAP32[+SYSCALLS.varargs >> 2];\n                SYSCALLS.varargs += 4;\n                return ret;\n            },\n            getp () {\n                return SYSCALLS.get();\n            },\n            getStr (ptr) {\n                var ret = UTF8ToString(ptr);\n                return ret;\n            },\n            getStreamFromFD (fd) {\n                var stream = FS.getStreamChecked(fd);\n                return stream;\n            }\n        };\n        var _environ_get = (__environ, environ_buf)=>{\n            var bufSize = 0;\n            getEnvStrings().forEach((string, i)=>{\n                var ptr = environ_buf + bufSize;\n                HEAPU32[__environ + i * 4 >> 2] = ptr;\n                stringToAscii(string, ptr);\n                bufSize += string.length + 1;\n            });\n            return 0;\n        };\n        var _environ_sizes_get = (penviron_count, penviron_buf_size)=>{\n            var strings = getEnvStrings();\n            HEAPU32[penviron_count >> 2] = strings.length;\n            var bufSize = 0;\n            strings.forEach((string)=>bufSize += string.length + 1);\n            HEAPU32[penviron_buf_size >> 2] = bufSize;\n            return 0;\n        };\n        function _fd_close(fd) {\n            try {\n                var stream = SYSCALLS.getStreamFromFD(fd);\n                FS.close(stream);\n                return 0;\n            } catch (e) {\n                if (typeof FS == \"undefined\" || !(e.name === \"ErrnoError\")) throw e;\n                return e.errno;\n            }\n        }\n        var doReadv = (stream, iov, iovcnt, offset)=>{\n            var ret = 0;\n            for(var i = 0; i < iovcnt; i++){\n                var ptr = HEAPU32[iov >> 2];\n                var len = HEAPU32[iov + 4 >> 2];\n                iov += 8;\n                var curr = FS.read(stream, HEAP8, ptr, len, offset);\n                if (curr < 0) return -1;\n                ret += curr;\n                if (curr < len) break;\n                if (typeof offset !== \"undefined\") offset += curr;\n            }\n            return ret;\n        };\n        function _fd_read(fd, iov, iovcnt, pnum) {\n            try {\n                var stream = SYSCALLS.getStreamFromFD(fd);\n                var num = doReadv(stream, iov, iovcnt);\n                HEAPU32[pnum >> 2] = num;\n                return 0;\n            } catch (e) {\n                if (typeof FS == \"undefined\" || !(e.name === \"ErrnoError\")) throw e;\n                return e.errno;\n            }\n        }\n        var convertI32PairToI53Checked = (lo, hi)=>hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;\n        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n            var offset = convertI32PairToI53Checked(offset_low, offset_high);\n            try {\n                if (isNaN(offset)) return 61;\n                var stream = SYSCALLS.getStreamFromFD(fd);\n                FS.llseek(stream, offset, whence);\n                tempI64 = [\n                    stream.position >>> 0,\n                    (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)\n                ], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];\n                if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;\n                return 0;\n            } catch (e) {\n                if (typeof FS == \"undefined\" || !(e.name === \"ErrnoError\")) throw e;\n                return e.errno;\n            }\n        }\n        var doWritev = (stream, iov, iovcnt, offset)=>{\n            var ret = 0;\n            for(var i = 0; i < iovcnt; i++){\n                var ptr = HEAPU32[iov >> 2];\n                var len = HEAPU32[iov + 4 >> 2];\n                iov += 8;\n                var curr = FS.write(stream, HEAP8, ptr, len, offset);\n                if (curr < 0) return -1;\n                ret += curr;\n                if (typeof offset !== \"undefined\") offset += curr;\n            }\n            return ret;\n        };\n        function _fd_write(fd, iov, iovcnt, pnum) {\n            try {\n                var stream = SYSCALLS.getStreamFromFD(fd);\n                var num = doWritev(stream, iov, iovcnt);\n                HEAPU32[pnum >> 2] = num;\n                return 0;\n            } catch (e) {\n                if (typeof FS == \"undefined\" || !(e.name === \"ErrnoError\")) throw e;\n                return e.errno;\n            }\n        }\n        var isLeapYear = (year)=>year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n        var arraySum = (array, index)=>{\n            var sum = 0;\n            for(var i = 0; i <= index; sum += array[i++]);\n            return sum;\n        };\n        var MONTH_DAYS_LEAP = [\n            31,\n            29,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ];\n        var MONTH_DAYS_REGULAR = [\n            31,\n            28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ];\n        var addDays = (date, days)=>{\n            var newDate = new Date(date.getTime());\n            while(days > 0){\n                var leap = isLeapYear(newDate.getFullYear());\n                var currentMonth = newDate.getMonth();\n                var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[currentMonth];\n                if (days > daysInCurrentMonth - newDate.getDate()) {\n                    days -= daysInCurrentMonth - newDate.getDate() + 1;\n                    newDate.setDate(1);\n                    if (currentMonth < 11) newDate.setMonth(currentMonth + 1);\n                    else {\n                        newDate.setMonth(0);\n                        newDate.setFullYear(newDate.getFullYear() + 1);\n                    }\n                } else {\n                    newDate.setDate(newDate.getDate() + days);\n                    return newDate;\n                }\n            }\n            return newDate;\n        };\n        var writeArrayToMemory = (array, buffer)=>{\n            HEAP8.set(array, buffer);\n        };\n        var _strftime = (s, maxsize, format, tm)=>{\n            var tm_zone = HEAPU32[tm + 40 >> 2];\n            var date = {\n                tm_sec: HEAP32[tm >> 2],\n                tm_min: HEAP32[tm + 4 >> 2],\n                tm_hour: HEAP32[tm + 8 >> 2],\n                tm_mday: HEAP32[tm + 12 >> 2],\n                tm_mon: HEAP32[tm + 16 >> 2],\n                tm_year: HEAP32[tm + 20 >> 2],\n                tm_wday: HEAP32[tm + 24 >> 2],\n                tm_yday: HEAP32[tm + 28 >> 2],\n                tm_isdst: HEAP32[tm + 32 >> 2],\n                tm_gmtoff: HEAP32[tm + 36 >> 2],\n                tm_zone: tm_zone ? UTF8ToString(tm_zone) : \"\"\n            };\n            var pattern = UTF8ToString(format);\n            var EXPANSION_RULES_1 = {\n                \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                \"%D\": \"%m/%d/%y\",\n                \"%F\": \"%Y-%m-%d\",\n                \"%h\": \"%b\",\n                \"%r\": \"%I:%M:%S %p\",\n                \"%R\": \"%H:%M\",\n                \"%T\": \"%H:%M:%S\",\n                \"%x\": \"%m/%d/%y\",\n                \"%X\": \"%H:%M:%S\",\n                \"%Ec\": \"%c\",\n                \"%EC\": \"%C\",\n                \"%Ex\": \"%m/%d/%y\",\n                \"%EX\": \"%H:%M:%S\",\n                \"%Ey\": \"%y\",\n                \"%EY\": \"%Y\",\n                \"%Od\": \"%d\",\n                \"%Oe\": \"%e\",\n                \"%OH\": \"%H\",\n                \"%OI\": \"%I\",\n                \"%Om\": \"%m\",\n                \"%OM\": \"%M\",\n                \"%OS\": \"%S\",\n                \"%Ou\": \"%u\",\n                \"%OU\": \"%U\",\n                \"%OV\": \"%V\",\n                \"%Ow\": \"%w\",\n                \"%OW\": \"%W\",\n                \"%Oy\": \"%y\"\n            };\n            for(var rule in EXPANSION_RULES_1)pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_1[rule]);\n            var WEEKDAYS = [\n                \"Sunday\",\n                \"Monday\",\n                \"Tuesday\",\n                \"Wednesday\",\n                \"Thursday\",\n                \"Friday\",\n                \"Saturday\"\n            ];\n            var MONTHS = [\n                \"January\",\n                \"February\",\n                \"March\",\n                \"April\",\n                \"May\",\n                \"June\",\n                \"July\",\n                \"August\",\n                \"September\",\n                \"October\",\n                \"November\",\n                \"December\"\n            ];\n            function leadingSomething(value, digits, character) {\n                var str = typeof value == \"number\" ? value.toString() : value || \"\";\n                while(str.length < digits)str = character[0] + str;\n                return str;\n            }\n            function leadingNulls(value, digits) {\n                return leadingSomething(value, digits, \"0\");\n            }\n            function compareByDay(date1, date2) {\n                function sgn(value) {\n                    return value < 0 ? -1 : value > 0 ? 1 : 0;\n                }\n                var compare;\n                if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {\n                    if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) compare = sgn(date1.getDate() - date2.getDate());\n                }\n                return compare;\n            }\n            function getFirstWeekStartDate(janFourth) {\n                switch(janFourth.getDay()){\n                    case 0:\n                        return new Date(janFourth.getFullYear() - 1, 11, 29);\n                    case 1:\n                        return janFourth;\n                    case 2:\n                        return new Date(janFourth.getFullYear(), 0, 3);\n                    case 3:\n                        return new Date(janFourth.getFullYear(), 0, 2);\n                    case 4:\n                        return new Date(janFourth.getFullYear(), 0, 1);\n                    case 5:\n                        return new Date(janFourth.getFullYear() - 1, 11, 31);\n                    case 6:\n                        return new Date(janFourth.getFullYear() - 1, 11, 30);\n                }\n            }\n            function getWeekBasedYear(date) {\n                var thisDate = addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);\n                var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n                var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);\n                var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n                var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n                if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n                    if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) return thisDate.getFullYear() + 1;\n                    return thisDate.getFullYear();\n                }\n                return thisDate.getFullYear() - 1;\n            }\n            var EXPANSION_RULES_2 = {\n                \"%a\": (date)=>WEEKDAYS[date.tm_wday].substring(0, 3),\n                \"%A\": (date)=>WEEKDAYS[date.tm_wday],\n                \"%b\": (date)=>MONTHS[date.tm_mon].substring(0, 3),\n                \"%B\": (date)=>MONTHS[date.tm_mon],\n                \"%C\": (date)=>{\n                    var year = date.tm_year + 1900;\n                    return leadingNulls(year / 100 | 0, 2);\n                },\n                \"%d\": (date)=>leadingNulls(date.tm_mday, 2),\n                \"%e\": (date)=>leadingSomething(date.tm_mday, 2, \" \"),\n                \"%g\": (date)=>getWeekBasedYear(date).toString().substring(2),\n                \"%G\": (date)=>getWeekBasedYear(date),\n                \"%H\": (date)=>leadingNulls(date.tm_hour, 2),\n                \"%I\": (date)=>{\n                    var twelveHour = date.tm_hour;\n                    if (twelveHour == 0) twelveHour = 12;\n                    else if (twelveHour > 12) twelveHour -= 12;\n                    return leadingNulls(twelveHour, 2);\n                },\n                \"%j\": (date)=>leadingNulls(date.tm_mday + arraySum(isLeapYear(date.tm_year + 1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, date.tm_mon - 1), 3),\n                \"%m\": (date)=>leadingNulls(date.tm_mon + 1, 2),\n                \"%M\": (date)=>leadingNulls(date.tm_min, 2),\n                \"%n\": ()=>\"\\n\",\n                \"%p\": (date)=>{\n                    if (date.tm_hour >= 0 && date.tm_hour < 12) return \"AM\";\n                    return \"PM\";\n                },\n                \"%S\": (date)=>leadingNulls(date.tm_sec, 2),\n                \"%t\": ()=>\"\t\",\n                \"%u\": (date)=>date.tm_wday || 7,\n                \"%U\": (date)=>{\n                    var days = date.tm_yday + 7 - date.tm_wday;\n                    return leadingNulls(Math.floor(days / 7), 2);\n                },\n                \"%V\": (date)=>{\n                    var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7);\n                    if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) val++;\n                    if (!val) {\n                        val = 52;\n                        var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n                        if (dec31 == 4 || dec31 == 5 && isLeapYear(date.tm_year % 400 - 1)) val++;\n                    } else if (val == 53) {\n                        var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n                        if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year))) val = 1;\n                    }\n                    return leadingNulls(val, 2);\n                },\n                \"%w\": (date)=>date.tm_wday,\n                \"%W\": (date)=>{\n                    var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7;\n                    return leadingNulls(Math.floor(days / 7), 2);\n                },\n                \"%y\": (date)=>(date.tm_year + 1900).toString().substring(2),\n                \"%Y\": (date)=>date.tm_year + 1900,\n                \"%z\": (date)=>{\n                    var off = date.tm_gmtoff;\n                    var ahead = off >= 0;\n                    off = Math.abs(off) / 60;\n                    off = off / 60 * 100 + off % 60;\n                    return (ahead ? \"+\" : \"-\") + String(\"0000\" + off).slice(-4);\n                },\n                \"%Z\": (date)=>date.tm_zone,\n                \"%%\": ()=>\"%\"\n            };\n            pattern = pattern.replace(/%%/g, \"\\x00\\x00\");\n            for(var rule in EXPANSION_RULES_2)if (pattern.includes(rule)) pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_2[rule](date));\n            pattern = pattern.replace(/\\0\\0/g, \"%\");\n            var bytes = intArrayFromString(pattern, false);\n            if (bytes.length > maxsize) return 0;\n            writeArrayToMemory(bytes, s);\n            return bytes.length - 1;\n        };\n        var _strftime_l = (s, maxsize, format, tm, loc)=>_strftime(s, maxsize, format, tm);\n        var getCFunc = (ident)=>{\n            var func = Module[\"_\" + ident];\n            return func;\n        };\n        var stringToUTF8OnStack = (str)=>{\n            var size = lengthBytesUTF8(str) + 1;\n            var ret = stackAlloc(size);\n            stringToUTF8(str, ret, size);\n            return ret;\n        };\n        var ccall = (ident, returnType, argTypes, args, opts)=>{\n            var toC = {\n                \"string\": (str)=>{\n                    var ret = 0;\n                    if (str !== null && str !== undefined && str !== 0) ret = stringToUTF8OnStack(str);\n                    return ret;\n                },\n                \"array\": (arr)=>{\n                    var ret = stackAlloc(arr.length);\n                    writeArrayToMemory(arr, ret);\n                    return ret;\n                }\n            };\n            function convertReturnValue(ret) {\n                if (returnType === \"string\") return UTF8ToString(ret);\n                if (returnType === \"boolean\") return Boolean(ret);\n                return ret;\n            }\n            var func = getCFunc(ident);\n            var cArgs = [];\n            var stack = 0;\n            if (args) for(var i = 0; i < args.length; i++){\n                var converter = toC[argTypes[i]];\n                if (converter) {\n                    if (stack === 0) stack = stackSave();\n                    cArgs[i] = converter(args[i]);\n                } else cArgs[i] = args[i];\n            }\n            var ret = func.apply(null, cArgs);\n            function onDone(ret) {\n                if (stack !== 0) stackRestore(stack);\n                return convertReturnValue(ret);\n            }\n            ret = onDone(ret);\n            return ret;\n        };\n        InternalError = Module[\"InternalError\"] = class InternalError extends Error {\n            constructor(message){\n                super(message);\n                this.name = \"InternalError\";\n            }\n        };\n        embind_init_charCodes();\n        BindingError = Module[\"BindingError\"] = class BindingError extends Error {\n            constructor(message){\n                super(message);\n                this.name = \"BindingError\";\n            }\n        };\n        init_ClassHandle();\n        init_embind();\n        init_RegisteredPointer();\n        UnboundTypeError = Module[\"UnboundTypeError\"] = extendError(Error, \"UnboundTypeError\");\n        handleAllocatorInit();\n        init_emval();\n        var FSNode = function(parent, name, mode, rdev) {\n            if (!parent) parent = this;\n            this.parent = parent;\n            this.mount = parent.mount;\n            this.mounted = null;\n            this.id = FS.nextInode++;\n            this.name = name;\n            this.mode = mode;\n            this.node_ops = {};\n            this.stream_ops = {};\n            this.rdev = rdev;\n        };\n        var readMode = 365;\n        var writeMode = 146;\n        Object.defineProperties(FSNode.prototype, {\n            read: {\n                get: function() {\n                    return (this.mode & readMode) === readMode;\n                },\n                set: function(val) {\n                    val ? this.mode |= readMode : this.mode &= ~readMode;\n                }\n            },\n            write: {\n                get: function() {\n                    return (this.mode & writeMode) === writeMode;\n                },\n                set: function(val) {\n                    val ? this.mode |= writeMode : this.mode &= ~writeMode;\n                }\n            },\n            isFolder: {\n                get: function() {\n                    return FS.isDir(this.mode);\n                }\n            },\n            isDevice: {\n                get: function() {\n                    return FS.isChrdev(this.mode);\n                }\n            }\n        });\n        FS.FSNode = FSNode;\n        FS.createPreloadedFile = FS_createPreloadedFile;\n        FS.staticInit();\n        var wasmImports = {\n            d: ___cxa_throw,\n            n: __embind_finalize_value_array,\n            l: __embind_finalize_value_object,\n            w: __embind_register_bigint,\n            G: __embind_register_bool,\n            h: __embind_register_class,\n            g: __embind_register_class_constructor,\n            c: __embind_register_class_function,\n            q: __embind_register_class_property,\n            F: __embind_register_emval,\n            p: __embind_register_enum,\n            i: __embind_register_enum_value,\n            t: __embind_register_float,\n            a: __embind_register_function,\n            j: __embind_register_integer,\n            e: __embind_register_memory_view,\n            u: __embind_register_std_string,\n            r: __embind_register_std_wstring,\n            o: __embind_register_value_array,\n            b: __embind_register_value_array_element,\n            m: __embind_register_value_object,\n            f: __embind_register_value_object_field,\n            H: __embind_register_void,\n            I: __emval_decref,\n            J: __emval_incref,\n            k: __emval_take_value,\n            s: _abort,\n            E: _emscripten_memcpy_js,\n            y: _emscripten_resize_heap,\n            z: _environ_get,\n            A: _environ_sizes_get,\n            B: _fd_close,\n            D: _fd_read,\n            v: _fd_seek,\n            C: _fd_write,\n            x: _strftime_l\n        };\n        var wasmExports = createWasm();\n        var ___wasm_call_ctors = ()=>(___wasm_call_ctors = wasmExports[\"L\"])();\n        var _malloc = Module[\"_malloc\"] = (a0)=>(_malloc = Module[\"_malloc\"] = wasmExports[\"M\"])(a0);\n        var _free = Module[\"_free\"] = (a0)=>(_free = Module[\"_free\"] = wasmExports[\"N\"])(a0);\n        var ___getTypeName = (a0)=>(___getTypeName = wasmExports[\"P\"])(a0);\n        var __embind_initialize_bindings = Module[\"__embind_initialize_bindings\"] = ()=>(__embind_initialize_bindings = Module[\"__embind_initialize_bindings\"] = wasmExports[\"Q\"])();\n        var ___errno_location = ()=>(___errno_location = wasmExports[\"__errno_location\"])();\n        var stackSave = ()=>(stackSave = wasmExports[\"R\"])();\n        var stackRestore = (a0)=>(stackRestore = wasmExports[\"S\"])(a0);\n        var stackAlloc = (a0)=>(stackAlloc = wasmExports[\"T\"])(a0);\n        var ___cxa_increment_exception_refcount = (a0)=>(___cxa_increment_exception_refcount = wasmExports[\"__cxa_increment_exception_refcount\"])(a0);\n        var ___cxa_is_pointer_type = (a0)=>(___cxa_is_pointer_type = wasmExports[\"U\"])(a0);\n        var dynCall_jiji = Module[\"dynCall_jiji\"] = (a0, a1, a2, a3, a4)=>(dynCall_jiji = Module[\"dynCall_jiji\"] = wasmExports[\"V\"])(a0, a1, a2, a3, a4);\n        var dynCall_viijii = Module[\"dynCall_viijii\"] = (a0, a1, a2, a3, a4, a5, a6)=>(dynCall_viijii = Module[\"dynCall_viijii\"] = wasmExports[\"W\"])(a0, a1, a2, a3, a4, a5, a6);\n        var dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = (a0, a1, a2, a3, a4, a5, a6)=>(dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = wasmExports[\"X\"])(a0, a1, a2, a3, a4, a5, a6);\n        var dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = (a0, a1, a2, a3, a4, a5, a6, a7, a8)=>(dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = wasmExports[\"Y\"])(a0, a1, a2, a3, a4, a5, a6, a7, a8);\n        var dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)=>(dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = wasmExports[\"Z\"])(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n        Module[\"ccall\"] = ccall;\n        var calledRun;\n        dependenciesFulfilled = function runCaller() {\n            if (!calledRun) run();\n            if (!calledRun) dependenciesFulfilled = runCaller;\n        };\n        function run() {\n            if (runDependencies > 0) return;\n            preRun();\n            if (runDependencies > 0) return;\n            function doRun() {\n                if (calledRun) return;\n                calledRun = true;\n                Module[\"calledRun\"] = true;\n                if (ABORT) return;\n                initRuntime();\n                readyPromiseResolve(Module);\n                if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n                postRun();\n            }\n            if (Module[\"setStatus\"]) {\n                Module[\"setStatus\"](\"Running...\");\n                setTimeout(function() {\n                    setTimeout(function() {\n                        Module[\"setStatus\"](\"\");\n                    }, 1);\n                    doRun();\n                }, 1);\n            } else doRun();\n        }\n        if (Module[\"preInit\"]) {\n            if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [\n                Module[\"preInit\"]\n            ];\n            while(Module[\"preInit\"].length > 0)Module[\"preInit\"].pop()();\n        }\n        run();\n        return moduleArg.ready;\n    };\n})();\nexports.default = Module;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequireb8e7\")\n\n//# sourceMappingURL=process.76e7e6d7.js.map\n","\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(moduleArg = {}) {\n\nvar Module=moduleArg;var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!=\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(text)}}var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module[\"HEAP8\"]=HEAP8=new Int8Array(b);Module[\"HEAP16\"]=HEAP16=new Int16Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(b);Module[\"HEAP32\"]=HEAP32=new Int32Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(b)}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module[\"noFSInit\"]&&!FS.init.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}var wasmBinaryFile;wasmBinaryFile=\"process.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}function getBinaryPromise(binaryFile){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch==\"function\"){return fetch(binaryFile,{credentials:\"same-origin\"}).then(response=>{if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+binaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(()=>getBinarySync(binaryFile))}}return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(instance=>instance).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){if(!binary&&typeof WebAssembly.instantiateStreaming==\"function\"&&!isDataURI(binaryFile)&&typeof fetch==\"function\"){return fetch(binaryFile,{credentials:\"same-origin\"}).then(response=>{var result=WebAssembly.instantiateStreaming(response,imports);return result.then(callback,function(reason){err(`wasm streaming compile failed: ${reason}`);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(binaryFile,imports,callback)})})}return instantiateArrayBuffer(binaryFile,imports,callback)}function createWasm(){var info={\"a\":wasmImports};function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports[\"K\"];updateMemoryViews();wasmTable=wasmExports[\"O\"];addOnInit(wasmExports[\"L\"]);removeRunDependency(\"wasm-instantiate\");return wasmExports}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24;this.set_type=function(type){HEAPU32[this.ptr+4>>2]=type};this.get_type=function(){return HEAPU32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAPU32[this.ptr+8>>2]};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor)};this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr};this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_type());if(isPointer){return HEAPU32[this.excPtr>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.excPtr}}var exceptionLast=0;var uncaughtExceptionCount=0;var ___cxa_throw=(ptr,type,destructor)=>{var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw exceptionLast};var tupleRegistrations={};var runDestructors=destructors=>{while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}};function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAP32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var InternalError;var throwInternalError=message=>{throw new InternalError(message)};var whenDependentTypesAreResolved=(myTypes,dependentTypes,getTypeConverters)=>{myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}};var __embind_finalize_value_array=rawTupleType=>{var reg=tupleRegistrations[rawTupleType];delete tupleRegistrations[rawTupleType];var elements=reg.elements;var elementsLength=elements.length;var elementTypes=elements.map(elt=>elt.getterReturnType).concat(elements.map(elt=>elt.setterArgumentType));var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;whenDependentTypesAreResolved([rawTupleType],elementTypes,function(elementTypes){elements.forEach((elt,i)=>{var getterReturnType=elementTypes[i];var getter=elt.getter;var getterContext=elt.getterContext;var setterArgumentType=elementTypes[i+elementsLength];var setter=elt.setter;var setterContext=elt.setterContext;elt.read=ptr=>getterReturnType[\"fromWireType\"](getter(getterContext,ptr));elt.write=(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,o));runDestructors(destructors)}});return[{name:reg.name,\"fromWireType\":ptr=>{var rv=new Array(elementsLength);for(var i=0;i<elementsLength;++i){rv[i]=elements[i].read(ptr)}rawDestructor(ptr);return rv},\"toWireType\":(destructors,o)=>{if(elementsLength!==o.length){throw new TypeError(`Incorrect number of tuple elements for ${reg.name}: expected=${elementsLength}, actual=${o.length}`)}var ptr=rawConstructor();for(var i=0;i<elementsLength;++i){elements[i].write(ptr,o[i])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};var structRegistrations={};var __embind_finalize_value_object=structType=>{var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(field=>field.getterReturnType).concat(fieldRecords.map(field=>field.setterArgumentType));whenDependentTypesAreResolved([structType],fieldTypes,fieldTypes=>{var fields={};fieldRecords.forEach((field,i)=>{var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:ptr=>getterReturnType[\"fromWireType\"](getter(getterContext,ptr)),write:(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,\"fromWireType\":ptr=>{var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},\"toWireType\":(destructors,o)=>{for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError(`Missing field: \"${fieldName}\"`)}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})};var __embind_register_bigint=(primitiveType,name,size,minRange,maxRange)=>{};var embind_init_charCodes=()=>{var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes};var embind_charCodes;var readLatin1String=ptr=>{var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret};var BindingError;var throwBindingError=message=>{throw new BindingError(message)};function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(!rawType){throwBindingError(`type \"${name}\" must have a positive integer typeid pointer`)}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(`Cannot register type '${name}' twice`)}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function registerType(rawType,registeredInstance,options={}){if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}return sharedRegisterType(rawType,registeredInstance,options)}var GenericWireTypeSize=8;var __embind_register_bool=(rawType,name,trueValue,falseValue)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":function(pointer){return this[\"fromWireType\"](HEAPU8[pointer])},destructorFunction:null})};var shallowCopyInternalPointer=o=>({count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType});var throwInstanceAlreadyDeleted=obj=>{function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+\" instance already deleted\")};var finalizationRegistry=false;var detachFinalizer=handle=>{};var runDestructor=$$=>{if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}};var releaseClassHandle=$$=>{$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}};var downcastPointer=(ptr,ptrClass,desiredClass)=>{if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)};var registeredPointers={};var getInheritedInstanceCount=()=>Object.keys(registeredInstances).length;var getLiveInheritedInstances=()=>{var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv};var deletionQueue=[];var flushPendingDeletes=()=>{while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj[\"delete\"]()}};var delayFunction;var setDelayFunction=fn=>{delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}};var init_embind=()=>{Module[\"getInheritedInstanceCount\"]=getInheritedInstanceCount;Module[\"getLiveInheritedInstances\"]=getLiveInheritedInstances;Module[\"flushPendingDeletes\"]=flushPendingDeletes;Module[\"setDelayFunction\"]=setDelayFunction};var registeredInstances={};var getBasestPointer=(class_,ptr)=>{if(ptr===undefined){throwBindingError(\"ptr should not be undefined\")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr};var getInheritedInstance=(class_,ptr)=>{ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]};var makeClassHandle=(prototype,record)=>{if(!record.ptrType||!record.ptr){throwInternalError(\"makeClassHandle requires ptr and ptrType\")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError(\"Both smartPtrType and smartPtr must be specified\")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))};function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance[\"clone\"]()}else{var rv=registeredInstance[\"clone\"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}var attachFinalizer=handle=>{if(\"undefined\"===typeof FinalizationRegistry){attachFinalizer=handle=>handle;return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$:$$};finalizationRegistry.register(handle,info,handle)}return handle};detachFinalizer=handle=>finalizationRegistry.unregister(handle);return attachFinalizer(handle)};var init_ClassHandle=()=>{Object.assign(ClassHandle.prototype,{\"isAliasOf\"(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;other.$$=other.$$;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right},\"clone\"(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}},\"delete\"(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}},\"isDeleted\"(){return!this.$$.ptr},\"deleteLater\"(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}})};function ClassHandle(){}var char_0=48;var char_9=57;var makeLegalFunctionName=name=>{if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return`_${name}`}return name};function createNamedFunction(name,body){name=makeLegalFunctionName(name);return{[name]:function(){return body.apply(this,arguments)}}[name]}var ensureOverloadTable=(proto,methodName,humanName)=>{if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${arguments.length}) - expects one of (${proto[methodName].overloadTable})!`)}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}};var exposePublicSymbol=(name,value,numArguments)=>{if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(`Cannot register public name '${name}' twice`)}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`)}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}};function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}var upcastPointer=(ptr,ptrClass,desiredClass)=>{while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr};function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError(\"Passing raw pointer to smart pointer is illegal\")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name} to parameter type ${this.name}`)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle[\"clone\"]();ptr=this.rawShare(ptr,Emval.toHandle(()=>clonedHandle[\"delete\"]()));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError(\"Unsupporting sharing policy\")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(`null is not a valid ${this.name}`)}return 0}if(!handle.$$){throwBindingError(`Cannot pass \"${embindRepr(handle)}\" as a ${this.name}`)}if(!handle.$$.ptr){throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`)}if(handle.$$.ptrType.isConst){throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function readPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}var init_RegisteredPointer=()=>{Object.assign(RegisteredPointer.prototype,{getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr},destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,\"deleteObject\"(handle){if(handle!==null){handle[\"delete\"]()}},\"fromWireType\":RegisteredPointer_fromWireType})};function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this[\"toWireType\"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this[\"toWireType\"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this[\"toWireType\"]=genericPointerToWireType}}var replacePublicSymbol=(name,value,numArguments)=>{if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}};var dynCallLegacy=(sig,ptr,args)=>{var f=Module[\"dynCall_\"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)};var wasmTableMirror=[];var wasmTable;var getWasmTableEntry=funcPtr=>{var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func};var dynCall=(sig,ptr,args)=>{if(sig.includes(\"j\")){return dynCallLegacy(sig,ptr,args)}var rtn=getWasmTableEntry(ptr).apply(null,args);return rtn};var getDynCaller=(sig,ptr)=>{var argCache=[];return function(){argCache.length=0;Object.assign(argCache,arguments);return dynCall(sig,ptr,argCache)}};var embind__requireFunction=(signature,rawFunction)=>{signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes(\"j\")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!=\"function\"){throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`)}return fp};var extendError=(baseErrorType,errorName)=>{var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return`${this.name}: ${this.message}`}};return errorClass};var UnboundTypeError;var getTypeName=type=>{var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv};var throwUnboundTypeError=(message,types)=>{var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(`${message}: `+unboundTypes.map(getTypeName).join([\", \"]))};var __embind_register_class=(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor)=>{name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(`Cannot construct ${name} due to unbound types`,[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError(\"Use 'new' to construct \"+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+\" has no accessible constructor\")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`)}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);if(registeredClass.baseClass){if(registeredClass.baseClass.__derivedClasses===undefined){registeredClass.baseClass.__derivedClasses=[]}registeredClass.baseClass.__derivedClasses.push(registeredClass)}var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+\"*\",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+\" const*\",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})};var heap32VectorToArray=(count,firstElement)=>{var array=[];for(var i=0;i<count;i++){array.push(HEAPU32[firstElement+i*4>>2])}return array};function newFunc(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(`new_ called with constructor type ${typeof constructor} which is not a function`)}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc,isAsync){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\"}var invokerFnBody=`\\n        return function ${makeLegalFunctionName(humanName)}(${argsList}) {\\n        if (arguments.length !== ${argCount-2}) {\\n          throwBindingError('function ${humanName} called with ' + arguments.length + ' arguments, expected ${argCount-2}');\\n        }`;if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\"}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired}invokerFnBody+=(returns||isAsync?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);return newFunc(Function,args1).apply(null,args2)}var __embind_register_class_constructor=(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor)=>{var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=`constructor ${classType.name}`;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount-1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`)}classType.registeredClass.constructor_body[argCount-1]=()=>{throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`,rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,argTypes=>{argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})};var __embind_register_class_function=(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual,isAsync)=>{var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=`${classType.name}.${methodName}`;if(methodName.startsWith(\"@@\")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`,rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context,isAsync);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})};var validateThis=(this_,classType,humanName)=>{if(!(this_ instanceof Object)){throwBindingError(`${humanName} with invalid \"this\": ${this_}`)}if(!(this_ instanceof classType.registeredClass.constructor)){throwBindingError(`${humanName} incompatible with \"this\" of type ${this_.constructor.name}`)}if(!this_.$$.ptr){throwBindingError(`cannot call emscripten binding method ${humanName} on deleted object`)}return upcastPointer(this_.$$.ptr,this_.$$.ptrType.registeredClass,classType.registeredClass)};var __embind_register_class_property=(classType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext)=>{fieldName=readLatin1String(fieldName);getter=embind__requireFunction(getterSignature,getter);whenDependentTypesAreResolved([],[classType],function(classType){classType=classType[0];var humanName=`${classType.name}.${fieldName}`;var desc={get(){throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`,[getterReturnType,setterArgumentType])},enumerable:true,configurable:true};if(setter){desc.set=()=>throwUnboundTypeError(`Cannot access ${humanName} due to unbound types`,[getterReturnType,setterArgumentType])}else{desc.set=v=>throwBindingError(humanName+\" is a read-only property\")}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);whenDependentTypesAreResolved([],setter?[getterReturnType,setterArgumentType]:[getterReturnType],function(types){var getterReturnType=types[0];var desc={get(){var ptr=validateThis(this,classType,humanName+\" getter\");return getterReturnType[\"fromWireType\"](getter(getterContext,ptr))},enumerable:true};if(setter){setter=embind__requireFunction(setterSignature,setter);var setterArgumentType=types[1];desc.set=function(v){var ptr=validateThis(this,classType,humanName+\" setter\");var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,v));runDestructors(destructors)}}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);return[]});return[]})};function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return this.allocated[id]!==undefined},allocate(handle){var id=this.freelist.pop()||this.allocated.length;this.allocated[id]=handle;return id},free(id){this.allocated[id]=undefined;this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[undefined];this.freelist=[]}var emval_handles=new HandleAllocator;var __emval_decref=handle=>{if(handle>=emval_handles.reserved&&0===--emval_handles.get(handle).refcount){emval_handles.free(handle)}};var count_emval_handles=()=>{var count=0;for(var i=emval_handles.reserved;i<emval_handles.allocated.length;++i){if(emval_handles.allocated[i]!==undefined){++count}}return count};var init_emval=()=>{emval_handles.allocated.push({value:undefined},{value:null},{value:true},{value:false});emval_handles.reserved=emval_handles.allocated.length;Module[\"count_emval_handles\"]=count_emval_handles};var Emval={toValue:handle=>{if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handles.get(handle).value},toHandle:value=>{switch(value){case undefined:return 1;case null:return 2;case true:return 3;case false:return 4;default:{return emval_handles.allocate({refcount:1,value:value})}}}};var __embind_register_emval=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":handle=>{var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":(destructors,value)=>Emval.toHandle(value),\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})};var enumReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?function(pointer){return this[\"fromWireType\"](HEAP8[pointer>>0])}:function(pointer){return this[\"fromWireType\"](HEAPU8[pointer>>0])};case 2:return signed?function(pointer){return this[\"fromWireType\"](HEAP16[pointer>>1])}:function(pointer){return this[\"fromWireType\"](HEAPU16[pointer>>1])};case 4:return signed?function(pointer){return this[\"fromWireType\"](HEAP32[pointer>>2])}:function(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])};default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};var __embind_register_enum=(rawType,name,size,isSigned)=>{name=readLatin1String(name);function ctor(){}ctor.values={};registerType(rawType,{name:name,constructor:ctor,\"fromWireType\":function(c){return this.constructor.values[c]},\"toWireType\":(destructors,c)=>c.value,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":enumReadValueFromPointer(name,size,isSigned),destructorFunction:null});exposePublicSymbol(name,ctor)};var requireRegisteredType=(rawType,humanName)=>{var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl};var __embind_register_enum_value=(rawEnumType,name,enumValue)=>{var enumType=requireRegisteredType(rawEnumType,\"enum\");name=readLatin1String(name);var Enum=enumType.constructor;var Value=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(`${enumType.name}_${name}`,function(){})}});Enum.values[enumValue]=Value;Enum[name]=Value};var embindRepr=v=>{if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}};var floatReadValueFromPointer=(name,width)=>{switch(width){case 4:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 8:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(`invalid float width (${width}): ${name}`)}};var __embind_register_float=(rawType,name,size)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":value=>value,\"toWireType\":(destructors,value)=>value,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":floatReadValueFromPointer(name,size),destructorFunction:null})};var __embind_register_function=(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn,isAsync)=>{var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(`Cannot call ${name} due to unbound types`,argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn,isAsync),argCount-1);return[]})};var integerReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?pointer=>HEAP8[pointer>>0]:pointer=>HEAPU8[pointer>>0];case 2:return signed?pointer=>HEAP16[pointer>>1]:pointer=>HEAPU16[pointer>>1];case 4:return signed?pointer=>HEAP32[pointer>>2]:pointer=>HEAPU32[pointer>>2];default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};var __embind_register_integer=(primitiveType,name,size,minRange,maxRange)=>{name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes(\"unsigned\");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":toWireType,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":integerReadValueFromPointer(name,size,minRange!==0),destructorFunction:null})};var __embind_register_memory_view=(rawType,dataTypeIndex,name)=>{var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){var size=HEAPU32[handle>>2];var data=HEAPU32[handle+4>>2];return new TA(HEAP8.buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf8\"):undefined;var UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\";var __embind_register_std_string=(rawType,name)=>{name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\"(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\"(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value==\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,destructorFunction(ptr){_free(ptr)}})};var UTF16Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var UTF16ToString=(ptr,maxBytesToRead)=>{var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str};var stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr};var lengthBytesUTF16=str=>str.length*2;var UTF32ToString=(ptr,maxBytesToRead)=>{var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str};var stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr};var lengthBytesUTF32=str=>{var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len};var __embind_register_std_wstring=(rawType,charSize,name)=>{name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=()=>HEAPU16;shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=()=>HEAPU32;shift=2}registerType(rawType,{name:name,\"fromWireType\":value=>{var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":(destructors,value)=>{if(!(typeof value==\"string\")){throwBindingError(`Cannot pass non-string to C++ string type ${name}`)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction(ptr){_free(ptr)}})};var __embind_register_value_array=(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor)=>{tupleRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),elements:[]}};var __embind_register_value_array_element=(rawTupleType,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext)=>{tupleRegistrations[rawTupleType].elements.push({getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})};var __embind_register_value_object=(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor)=>{structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}};var __embind_register_value_object_field=(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext)=>{structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})};var __embind_register_void=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":()=>undefined,\"toWireType\":(destructors,o)=>undefined})};var __emval_incref=handle=>{if(handle>4){emval_handles.get(handle).refcount+=1}};var __emval_take_value=(type,arg)=>{type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](arg);return Emval.toHandle(v)};var _abort=()=>{abort(\"\")};var _emscripten_memcpy_js=(dest,src,num)=>HEAPU8.copyWithin(dest,src,src+num);var getHeapMax=()=>2147483648;var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}var alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};var ENV={};var getExecutableName=()=>thisProgram||\"./this.program\";var getEnvStrings=()=>{if(!getEnvStrings.strings){var lang=(typeof navigator==\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(`${x}=${env[x]}`)}getEnvStrings.strings=strings}return getEnvStrings.strings};var stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}HEAP8[buffer>>0]=0};var PATH={isAbs:path=>path.charAt(0)===\"/\",splitPath:filename=>{var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(p=>!!p),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path===\"/\")return\"/\";path=PATH.normalize(path);path=path.replace(/\\/$/,\"\");var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:function(){var paths=Array.prototype.slice.call(arguments);return PATH.normalize(paths.join(\"/\"))},join2:(l,r)=>PATH.normalize(l+\"/\"+r)};var initRandomFill=()=>{if(typeof crypto==\"object\"&&typeof crypto[\"getRandomValues\"]==\"function\"){return view=>crypto.getRandomValues(view)}else abort(\"initRandomDevice\")};var randomFill=view=>(randomFill=initRandomFill())(view);var PATH_FS={resolve:function(){var resolvedPath=\"\",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=\"string\"){throw new TypeError(\"Arguments to path.resolve must be strings\")}else if(!path){return\"\"}resolvedPath=path+\"/\"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split(\"/\").filter(p=>!!p),!resolvedAbsolute).join(\"/\");return(resolvedAbsolute?\"/\":\"\")+resolvedPath||\".\"},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!==\"\")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!==\"\")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split(\"/\"));var toParts=trim(to.split(\"/\"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push(\"..\")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join(\"/\")}};var FS_stdin_getChar_buffer=[];function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(typeof window!=\"undefined\"&&typeof window.prompt==\"function\"){result=window.prompt(\"Input: \");if(result!==null){result+=\"\\n\"}}else if(typeof readline==\"function\"){result=readline();if(result!==null){result+=\"\\n\"}}if(!result){return null}FS_stdin_getChar_buffer=intArrayFromString(result,true)}return FS_stdin_getChar_buffer.shift()};var TTY={ttys:[],init(){},shutdown(){},register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close(stream){stream.tty.ops.fsync(stream.tty)},fsync(stream){stream.tty.ops.fsync(stream.tty)},read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char(tty){return FS_stdin_getChar()},put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}},ioctl_tcgets(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets(tty,optional_actions,data){return 0},ioctl_tiocgwinsz(tty){return[24,80]}},default_tty1_ops:{put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var mmapAlloc=size=>{abort()};var MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,\"/\",16384|511,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir(node){var entries=[\".\",\"..\"];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===HEAP8.buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=!noRunDep?getUniqueRunDependency(`al ${url}`):\"\";readAsync(url,arrayBuffer=>{assert(arrayBuffer,`Loading data file \"${url}\" failed (no arrayBuffer).`);onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},event=>{if(onerror){onerror()}else{throw`Loading data file \"${url}\" failed.`}});if(dep)addRunDependency(dep)};var FS_createDataFile=(parent,name,fileData,canRead,canWrite,canOwn)=>FS.createDataFile(parent,name,fileData,canRead,canWrite,canOwn);var preloadPlugins=Module[\"preloadPlugins\"]||[];var FS_handledByPreloadPlugin=(byteArray,fullname,finish,onerror)=>{if(typeof Browser!=\"undefined\")Browser.init();var handled=false;preloadPlugins.forEach(plugin=>{if(handled)return;if(plugin[\"canHandle\"](fullname)){plugin[\"handle\"](byteArray,fullname,finish,onerror);handled=true}});return handled};var FS_createPreloadedFile=(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(`cp ${fullname}`);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS_createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}if(FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{if(onerror)onerror();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url==\"string\"){asyncLoad(url,byteArray=>processData(byteArray),onerror)}else{processData(url)}};var FS_modeStringToFlags=str=>{var flagModes={\"r\":0,\"r+\":2,\"w\":512|64|1,\"w+\":512|64|2,\"a\":1024|64|1,\"a+\":1024|64|2};var flags=flagModes[str];if(typeof flags==\"undefined\"){throw new Error(`Unknown file open mode: ${str}`)}return flags};var FS_getMode=(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath(path,opts={}){path=PATH_FS.resolve(path);if(!path)return{path:\"\",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split(\"/\").filter(p=>!!p);var current=FS.root;var current_path=\"/\";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!==\"/\"?`${mount}/${path}`:mount+path}path=path?`${node.name}/${path}`:node.name;node=node.parent}},hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode(node){FS.hashRemoveNode(node)},isRoot(node){return node===node.parent},isMountpoint(node){return!!node.mounted},isFile(mode){return(mode&61440)===32768},isDir(mode){return(mode&61440)===16384},isLink(mode){return(mode&61440)===40960},isChrdev(mode){return(mode&61440)===8192},isBlkdev(mode){return(mode&61440)===24576},isFIFO(mode){return(mode&61440)===4096},isSocket(mode){return(mode&49152)===49152},flagsToPermissionString(flag){var perms=[\"r\",\"w\",\"rw\"][flag&3];if(flag&512){perms+=\"w\"}return perms},nodePermissions(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes(\"r\")&&!(node.mode&292)){return 2}else if(perms.includes(\"w\")&&!(node.mode&146)){return 2}else if(perms.includes(\"x\")&&!(node.mode&73)){return 2}return 0},mayLookup(dir){var errCode=FS.nodePermissions(dir,\"x\");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,\"wx\")},mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,\"wx\");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!==\"r\"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd(){for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStreamChecked(fd){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}return stream},getStream:fd=>FS.streams[fd],createStream(stream,fd=-1){if(!FS.FSStream){FS.FSStream=function(){this.shared={}};FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get(){return this.node},set(val){this.node=val}},isRead:{get(){return(this.flags&2097155)!==1}},isWrite:{get(){return(this.flags&2097155)!==0}},isAppend:{get(){return this.flags&1024}},flags:{get(){return this.shared.flags},set(val){this.shared.flags=val}},position:{get(){return this.shared.position},set(val){this.shared.position=val}}})}stream=Object.assign(new FS.FSStream,stream);if(fd==-1){fd=FS.nextfd()}stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream(fd){FS.streams[fd]=null},chrdev_stream_ops:{open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek(){throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs(populate,callback){if(typeof populate==\"function\"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`)}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount(type,opts,mountpoint){var root=mountpoint===\"/\";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup(parent,name){return parent.node_ops.lookup(parent,name)},mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name===\".\"||name===\"..\"){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree(path,mode){var dirs=path.split(\"/\");var d=\"\";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+=\"/\"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev(path,mode,dev){if(typeof dev==\"undefined\"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!==\".\"){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,\"w\");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat(path){return FS.stat(path,true)},chmod(path,mode,dontFollow){var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod(path,mode){FS.chmod(path,mode,true)},fchmod(fd,mode){var stream=FS.getStreamChecked(fd);FS.chmod(stream.node,mode)},chown(path,uid,gid,dontFollow){var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown(path,uid,gid){FS.chown(path,uid,gid,true)},fchown(fd,uid,gid){var stream=FS.getStreamChecked(fd);FS.chown(stream.node,uid,gid)},truncate(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==\"string\"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,\"w\");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate(fd,len){var stream=FS.getStreamChecked(fd);if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open(path,flags,mode){if(path===\"\"){throw new FS.ErrnoError(44)}flags=typeof flags==\"string\"?FS_modeStringToFlags(flags):flags;mode=typeof mode==\"undefined\"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==\"object\"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module[\"logReadFiles\"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed(stream){return stream.fd===null},llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=\"undefined\";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap(stream,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync(stream,buffer,offset,length,mmapFlags){if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:stream=>0,ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile(path,opts={}){opts.flags=opts.flags||0;opts.encoding=opts.encoding||\"binary\";if(opts.encoding!==\"utf8\"&&opts.encoding!==\"binary\"){throw new Error(`Invalid encoding type \"${opts.encoding}\"`)}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding===\"utf8\"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding===\"binary\"){ret=buf}FS.close(stream);return ret},writeFile(path,data,opts={}){opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==\"string\"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error(\"Unsupported data type\")}FS.close(stream)},cwd:()=>FS.currentPath,chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,\"x\");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories(){FS.mkdir(\"/tmp\");FS.mkdir(\"/home\");FS.mkdir(\"/home/web_user\")},createDefaultDevices(){FS.mkdir(\"/dev\");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev(\"/dev/null\",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev(\"/dev/tty\",FS.makedev(5,0));FS.mkdev(\"/dev/tty1\",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0;var randomByte=()=>{if(randomLeft===0){randomLeft=randomFill(randomBuffer).byteLength}return randomBuffer[--randomLeft]};FS.createDevice(\"/dev\",\"random\",randomByte);FS.createDevice(\"/dev\",\"urandom\",randomByte);FS.mkdir(\"/dev/shm\");FS.mkdir(\"/dev/shm/tmp\")},createSpecialDirectories(){FS.mkdir(\"/proc\");var proc_self=FS.mkdir(\"/proc/self\");FS.mkdir(\"/proc/self/fd\");FS.mount({mount(){var node=FS.createNode(proc_self,\"fd\",16384|511,73);node.node_ops={lookup(parent,name){var fd=+name;var stream=FS.getStreamChecked(fd);var ret={parent:null,mount:{mountpoint:\"fake\"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},\"/proc/self/fd\")},createStandardStreams(){if(Module[\"stdin\"]){FS.createDevice(\"/dev\",\"stdin\",Module[\"stdin\"])}else{FS.symlink(\"/dev/tty\",\"/dev/stdin\")}if(Module[\"stdout\"]){FS.createDevice(\"/dev\",\"stdout\",null,Module[\"stdout\"])}else{FS.symlink(\"/dev/tty\",\"/dev/stdout\")}if(Module[\"stderr\"]){FS.createDevice(\"/dev\",\"stderr\",null,Module[\"stderr\"])}else{FS.symlink(\"/dev/tty1\",\"/dev/stderr\")}var stdin=FS.open(\"/dev/stdin\",0);var stdout=FS.open(\"/dev/stdout\",1);var stderr=FS.open(\"/dev/stderr\",1)},ensureErrnoError(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.name=\"ErrnoError\";this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message=\"FS error\"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack=\"<generic error, no stack>\"})},staticInit(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},\"/\");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={\"MEMFS\":MEMFS}},init(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module[\"stdin\"]=input||Module[\"stdin\"];Module[\"stdout\"]=output||Module[\"stdout\"];Module[\"stderr\"]=error||Module[\"stderr\"];FS.createStandardStreams()},quit(){FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path===\"/\"}catch(e){ret.error=e.errno}return ret},createPath(parent,path,canRead,canWrite){parent=typeof parent==\"string\"?parent:FS.getPath(parent);var parts=path.split(\"/\").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==\"string\"?parent:FS.getPath(parent),name);var mode=FS_getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name;if(parent){parent=typeof parent==\"string\"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS_getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==\"string\"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice(parent,name,input,output){var path=PATH.join2(typeof parent==\"string\"?parent:FS.getPath(parent),name);var mode=FS_getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open(stream){stream.seekable=false},close(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!=\"undefined\"){throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error(\"Cannot load without read() or XMLHttpRequest.\")}},createLazyFile(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open(\"HEAD\",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);var datalength=Number(xhr.getResponseHeader(\"Content-length\"));var header;var hasByteServing=(header=xhr.getResponseHeader(\"Accept-Ranges\"))&&header===\"bytes\";var usesGzip=(header=xhr.getResponseHeader(\"Content-Encoding\"))&&header===\"gzip\";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error(\"invalid range (\"+from+\", \"+to+\") or no bytes requested!\");if(to>datalength-1)throw new Error(\"only \"+datalength+\" bytes available! programmer error!\");var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);if(datalength!==chunkSize)xhr.setRequestHeader(\"Range\",\"bytes=\"+from+\"-\"+to);xhr.responseType=\"arraybuffer\";if(xhr.overrideMimeType){xhr.overrideMimeType(\"text/plain; charset=x-user-defined\")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error(\"Couldn't load \"+url+\". Status: \"+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||\"\",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==\"undefined\"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==\"undefined\")throw new Error(\"doXHR failed!\");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out(\"LazyFiles on gzip forces download of the whole file when length is accessed\")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=\"undefined\"){if(!ENVIRONMENT_IS_WORKER)throw\"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,HEAP8,ptr,length,position);return{ptr:ptr,allocated:true}};node.stream_ops=stream_ops;return node}};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=stat.mode;HEAPU32[buf+8>>2]=stat.nlink;HEAP32[buf+12>>2]=stat.uid;HEAP32[buf+16>>2]=stat.gid;HEAP32[buf+20>>2]=stat.rdev;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+24>>2]=tempI64[0],HEAP32[buf+28>>2]=tempI64[1];HEAP32[buf+32>>2]=4096;HEAP32[buf+36>>2]=stat.blocks;var atime=stat.atime.getTime();var mtime=stat.mtime.getTime();var ctime=stat.ctime.getTime();tempI64=[Math.floor(atime/1e3)>>>0,(tempDouble=Math.floor(atime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAPU32[buf+48>>2]=atime%1e3*1e3;tempI64=[Math.floor(mtime/1e3)>>>0,(tempDouble=Math.floor(mtime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+56>>2]=tempI64[0],HEAP32[buf+60>>2]=tempI64[1];HEAPU32[buf+64>>2]=mtime%1e3*1e3;tempI64=[Math.floor(ctime/1e3)>>>0,(tempDouble=Math.floor(ctime/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+72>>2]=tempI64[0],HEAP32[buf+76>>2]=tempI64[1];HEAPU32[buf+80>>2]=ctime%1e3*1e3;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+88>>2]=tempI64[0],HEAP32[buf+92>>2]=tempI64[1];return 0},doMsync(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},varargs:undefined,get(){var ret=HEAP32[+SYSCALLS.varargs>>2];SYSCALLS.varargs+=4;return ret},getp(){return SYSCALLS.get()},getStr(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD(fd){var stream=FS.getStreamChecked(fd);return stream}};var _environ_get=(__environ,environ_buf)=>{var bufSize=0;getEnvStrings().forEach((string,i)=>{var ptr=environ_buf+bufSize;HEAPU32[__environ+i*4>>2]=ptr;stringToAscii(string,ptr);bufSize+=string.length+1});return 0};var _environ_sizes_get=(penviron_count,penviron_buf_size)=>{var strings=getEnvStrings();HEAPU32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(string=>bufSize+=string.length+1);HEAPU32[penviron_buf_size>>2]=bufSize;return 0};function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;if(typeof offset!==\"undefined\"){offset+=curr}}return ret};function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var convertI32PairToI53Checked=(lo,hi)=>hi+2097152>>>0<4194305-!!lo?(lo>>>0)+hi*4294967296:NaN;function _fd_seek(fd,offset_low,offset_high,whence,newOffset){var offset=convertI32PairToI53Checked(offset_low,offset_high);try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?+Math.floor(tempDouble/4294967296)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(typeof offset!==\"undefined\"){offset+=curr}}return ret};function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS==\"undefined\"||!(e.name===\"ErrnoError\"))throw e;return e.errno}}var isLeapYear=year=>year%4===0&&(year%100!==0||year%400===0);var arraySum=(array,index)=>{var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum};var MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];var addDays=(date,days)=>{var newDate=new Date(date.getTime());while(days>0){var leap=isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate};var writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer)};var _strftime=(s,maxsize,format,tm)=>{var tm_zone=HEAPU32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value==\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}return thisDate.getFullYear()}return thisDate.getFullYear()-1}var EXPANSION_RULES_2={\"%a\":date=>WEEKDAYS[date.tm_wday].substring(0,3),\"%A\":date=>WEEKDAYS[date.tm_wday],\"%b\":date=>MONTHS[date.tm_mon].substring(0,3),\"%B\":date=>MONTHS[date.tm_mon],\"%C\":date=>{var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":date=>leadingNulls(date.tm_mday,2),\"%e\":date=>leadingSomething(date.tm_mday,2,\" \"),\"%g\":date=>getWeekBasedYear(date).toString().substring(2),\"%G\":date=>getWeekBasedYear(date),\"%H\":date=>leadingNulls(date.tm_hour,2),\"%I\":date=>{var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":date=>leadingNulls(date.tm_mday+arraySum(isLeapYear(date.tm_year+1900)?MONTH_DAYS_LEAP:MONTH_DAYS_REGULAR,date.tm_mon-1),3),\"%m\":date=>leadingNulls(date.tm_mon+1,2),\"%M\":date=>leadingNulls(date.tm_min,2),\"%n\":()=>\"\\n\",\"%p\":date=>{if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}return\"PM\"},\"%S\":date=>leadingNulls(date.tm_sec,2),\"%t\":()=>\"\\t\",\"%u\":date=>date.tm_wday||7,\"%U\":date=>{var days=date.tm_yday+7-date.tm_wday;return leadingNulls(Math.floor(days/7),2)},\"%V\":date=>{var val=Math.floor((date.tm_yday+7-(date.tm_wday+6)%7)/7);if((date.tm_wday+371-date.tm_yday-2)%7<=2){val++}if(!val){val=52;var dec31=(date.tm_wday+7-date.tm_yday-1)%7;if(dec31==4||dec31==5&&isLeapYear(date.tm_year%400-1)){val++}}else if(val==53){var jan1=(date.tm_wday+371-date.tm_yday)%7;if(jan1!=4&&(jan1!=3||!isLeapYear(date.tm_year)))val=1}return leadingNulls(val,2)},\"%w\":date=>date.tm_wday,\"%W\":date=>{var days=date.tm_yday+7-(date.tm_wday+6)%7;return leadingNulls(Math.floor(days/7),2)},\"%y\":date=>(date.tm_year+1900).toString().substring(2),\"%Y\":date=>date.tm_year+1900,\"%z\":date=>{var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":date=>date.tm_zone,\"%%\":()=>\"%\"};pattern=pattern.replace(/%%/g,\"\\0\\0\");for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}pattern=pattern.replace(/\\0\\0/g,\"%\");var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1};var _strftime_l=(s,maxsize,format,tm,loc)=>_strftime(s,maxsize,format,tm);var getCFunc=ident=>{var func=Module[\"_\"+ident];return func};var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8(str,ret,size);return ret};var ccall=(ident,returnType,argTypes,args,opts)=>{var toC={\"string\":str=>{var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=stringToUTF8OnStack(str)}return ret},\"array\":arr=>{var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\"){return UTF8ToString(ret)}if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);function onDone(ret){if(stack!==0)stackRestore(stack);return convertReturnValue(ret)}ret=onDone(ret);return ret};InternalError=Module[\"InternalError\"]=class InternalError extends Error{constructor(message){super(message);this.name=\"InternalError\"}};embind_init_charCodes();BindingError=Module[\"BindingError\"]=class BindingError extends Error{constructor(message){super(message);this.name=\"BindingError\"}};init_ClassHandle();init_embind();init_RegisteredPointer();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");handleAllocatorInit();init_emval();var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.createPreloadedFile=FS_createPreloadedFile;FS.staticInit();var wasmImports={d:___cxa_throw,n:__embind_finalize_value_array,l:__embind_finalize_value_object,w:__embind_register_bigint,G:__embind_register_bool,h:__embind_register_class,g:__embind_register_class_constructor,c:__embind_register_class_function,q:__embind_register_class_property,F:__embind_register_emval,p:__embind_register_enum,i:__embind_register_enum_value,t:__embind_register_float,a:__embind_register_function,j:__embind_register_integer,e:__embind_register_memory_view,u:__embind_register_std_string,r:__embind_register_std_wstring,o:__embind_register_value_array,b:__embind_register_value_array_element,m:__embind_register_value_object,f:__embind_register_value_object_field,H:__embind_register_void,I:__emval_decref,J:__emval_incref,k:__emval_take_value,s:_abort,E:_emscripten_memcpy_js,y:_emscripten_resize_heap,z:_environ_get,A:_environ_sizes_get,B:_fd_close,D:_fd_read,v:_fd_seek,C:_fd_write,x:_strftime_l};var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports[\"L\"])();var _malloc=Module[\"_malloc\"]=a0=>(_malloc=Module[\"_malloc\"]=wasmExports[\"M\"])(a0);var _free=Module[\"_free\"]=a0=>(_free=Module[\"_free\"]=wasmExports[\"N\"])(a0);var ___getTypeName=a0=>(___getTypeName=wasmExports[\"P\"])(a0);var __embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=()=>(__embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=wasmExports[\"Q\"])();var ___errno_location=()=>(___errno_location=wasmExports[\"__errno_location\"])();var stackSave=()=>(stackSave=wasmExports[\"R\"])();var stackRestore=a0=>(stackRestore=wasmExports[\"S\"])(a0);var stackAlloc=a0=>(stackAlloc=wasmExports[\"T\"])(a0);var ___cxa_increment_exception_refcount=a0=>(___cxa_increment_exception_refcount=wasmExports[\"__cxa_increment_exception_refcount\"])(a0);var ___cxa_is_pointer_type=a0=>(___cxa_is_pointer_type=wasmExports[\"U\"])(a0);var dynCall_jiji=Module[\"dynCall_jiji\"]=(a0,a1,a2,a3,a4)=>(dynCall_jiji=Module[\"dynCall_jiji\"]=wasmExports[\"V\"])(a0,a1,a2,a3,a4);var dynCall_viijii=Module[\"dynCall_viijii\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_viijii=Module[\"dynCall_viijii\"]=wasmExports[\"W\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=(a0,a1,a2,a3,a4,a5,a6)=>(dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=wasmExports[\"X\"])(a0,a1,a2,a3,a4,a5,a6);var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8)=>(dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=wasmExports[\"Y\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8);var dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)=>(dynCall_iiiiiijj=Module[\"dynCall_iiiiiijj\"]=wasmExports[\"Z\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9);Module[\"ccall\"]=ccall;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nexport default Module;"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","_scriptDir","document","currentScript","src","undefined","moduleArg","Promise","reject","readyPromiseResolve","readyPromiseReject","read_","readAsync","readBinary","wasmBinary","wasmMemory","HEAP8","HEAPU8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","wasmBinaryFile","tempDouble","tempI64","InternalError","embind_charCodes","BindingError","delayFunction","wasmTable","UnboundTypeError","calledRun","path","baseErrorType","errorName","errorClass","moduleOverrides","assign","thisProgram","scriptDirectory","indexOf","substr","replace","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","onload","onerror","responseType","status","response","out","console","log","error","WebAssembly","abort","ABORT","updateMemoryViews","b","buffer","Int8Array","Int16Array","Uint8Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","removeRunDependency","clearInterval","callback","what","e","RuntimeError","isDataURI","filename","startsWith","getBinarySync","file","instantiateArrayBuffer","binaryFile","imports","receiver","getBinaryPromise","fetch","then","credentials","catch","binary","instantiate","instance","reason","callRuntimeCallbacks","callbacks","shift","ExceptionInfo","excPtr","ptr","set_type","type","get_type","set_destructor","destructor","get_destructor","set_caught","caught","get_caught","set_rethrown","rethrown","get_rethrown","init","set_adjusted_ptr","adjustedPtr","get_adjusted_ptr","get_exception_ptr","___cxa_is_pointer_type","adjusted","exceptionLast","uncaughtExceptionCount","tupleRegistrations","runDestructors","destructors","pop","del","simpleReadValueFromPointer","pointer","awaitingDependencies","registeredTypes","typeDependencies","throwInternalError","message","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","forEach","Array","unregisteredTypes","registered","dt","hasOwnProperty","push","structRegistrations","readLatin1String","ret","c","throwBindingError","rawType","registeredInstance","options","TypeError","sharedRegisterType","ignoreDuplicateRegistrations","cb","shallowCopyInternalPointer","o","count","deleteScheduled","preservePointerOnDelete","ptrType","smartPtr","smartPtrType","throwInstanceAlreadyDeleted","obj","getInstanceTypeName","handle","$$","registeredClass","finalizationRegistry","detachFinalizer","runDestructor","rawDestructor","releaseClassHandle","value","downcastPointer","ptrClass","desiredClass","baseClass","rv","downcast","registeredPointers","deletionQueue","flushPendingDeletes","registeredInstances","getBasestPointer","class_","upcast","getInheritedInstance","makeClassHandle","prototype","record","attachFinalizer","create","FinalizationRegistry","info","unregister","ClassHandle","makeLegalFunctionName","f","charCodeAt","createNamedFunction","body","apply","arguments","ensureOverloadTable","proto","methodName","humanName","overloadTable","prevFunc","argCount","exposePublicSymbol","numArguments","RegisteredClass","constructor","instancePrototype","getActualType","pureVirtualFunctions","upcastPointer","constNoSmartPtrRawPointerToWireType","isReference","embindRepr","handleClass","genericPointerToWireType","isSmartPointer","rawConstructor","isConst","sharingPolicy","clonedHandle","rawShare","Emval","toHandle","nonConstNoSmartPtrRawPointerToWireType","readPointer","RegisteredPointer","pointeeType","rawGetPointee","destructorFunction","replacePublicSymbol","dynCallLegacy","sig","args","concat","wasmTableMirror","getWasmTableEntry","funcPtr","func","dynCall","includes","getDynCaller","argCache","embind__requireFunction","signature","rawFunction","fp","getTypeName","___getTypeName","_free","throwUnboundTypeError","types","unboundTypes","seen","visit","map","join","heap32VectorToArray","firstElement","array","craftInvokerFunction","argTypes","classType","cppInvokerFunc","cppTargetFunc","isAsync","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","paramName","newFunc","argumentList","Function","dummy","r","validateThis","this_","HandleAllocator","allocated","freelist","emval_handles","__emval_decref","reserved","refcount","free","toValue","allocate","enumReadValueFromPointer","width","signed","requireRegisteredType","impl","v","t","toString","floatReadValueFromPointer","integerReadValueFromPointer","stringToUTF8Array","str","heap","outIdx","maxBytesToWrite","startIdx","endIdx","u","u1","stringToUTF8","outPtr","lengthBytesUTF8","len","UTF8Decoder","TextDecoder","UTF8ArrayToString","heapOrArray","idx","maxBytesToRead","endPtr","decode","subarray","u0","String","fromCharCode","u2","ch","UTF8ToString","UTF16Decoder","UTF16ToString","maxIdx","codeUnit","stringToUTF16","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","stringToUTF32","trailSurrogate","lengthBytesUTF32","getHeapMax","growMemory","size","pages","byteLength","grow","ENV","getExecutableName","getEnvStrings","strings","env","navigator","languages","stringToAscii","PATH","isAbs","charAt","splitPath","splitPathRe","exec","slice","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","normalize","isAbsolute","trailingSlash","split","filter","p","dirname","result","root","dir","basename","lastSlash","paths","join2","l","initRandomFill","crypto","view","getRandomValues","randomFill","PATH_FS","resolvedPath","resolvedAbsolute","FS","cwd","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","FS_stdin_getChar_buffer","intArrayFromString","stringy","dontAddNull","u8array","numBytesWritten","FS_stdin_getChar","prompt","readline","TTY","ttys","shutdown","dev","ops","input","output","registerDevice","stream_ops","stream","tty","node","rdev","ErrnoError","seekable","close","fsync","read","offset","pos","get_char","bytesRead","timestamp","Date","now","write","put_char","default_tty_ops","val","ioctl_tcgets","c_iflag","c_oflag","c_cflag","c_lflag","c_cc","ioctl_tcsets","optional_actions","data","ioctl_tiocgwinsz","default_tty1_ops","mmapAlloc","MEMFS","ops_table","mount","createNode","mode","isBlkdev","isFIFO","getattr","node_ops","setattr","lookup","mknod","rename","unlink","rmdir","readdir","symlink","llseek","mmap","msync","link","readlink","chrdev","chrdev_stream_ops","isDir","contents","isFile","usedBytes","isLink","isChrdev","getFileDataAsTypedArray","expandFileStorage","newCapacity","prevCapacity","max","oldContents","set","resizeFileStorage","newSize","attr","ino","nlink","uid","gid","atime","mtime","ctime","blksize","blocks","ceil","genericErrors","old_node","new_dir","new_name","new_node","lookupNode","entries","key","newname","oldpath","position","canOwn","whence","prot","flags","byteOffset","mmapFlags","asyncLoad","noRunDep","dep","arrayBuffer","text","event","FS_createDataFile","fileData","canRead","canWrite","createDataFile","preloadPlugins","FS_handledByPreloadPlugin","byteArray","fullname","finish","Browser","handled","plugin","FS_modeStringToFlags","flagModes","FS_getMode","mounts","devices","streams","nextInode","nameTable","currentPath","initialized","ignorePermissions","filesystems","syncFSRequests","lookupPath","opts","follow_mount","recurse_count","current","current_path","islast","isMountpoint","mounted","follow","getPath","isRoot","mountpoint","hashName","parentid","hash","hashAddNode","name_next","hashRemoveNode","errCode","mayLookup","nodeName","FSNode","destroyNode","isSocket","flagsToPermissionString","flag","perms","nodePermissions","mayCreate","mayDelete","isdir","errno","mayOpen","MAX_OPEN_FDS","nextfd","fd","getStreamChecked","getStream","createStream","FSStream","shared","defineProperties","object","isRead","isWrite","isAppend","closeStream","device","getDevice","major","minor","makedev","ma","mi","getMounts","check","m","syncfs","populate","completed","doCallback","done","errored","pseudo","mountRoot","unmount","keys","next","mkdir","mkdirTree","dirs","d","mkdev","newpath","old_path","new_path","old_dir","old_dirname","new_dirname","old_name","stat","dontFollow","lstat","chmod","lchmod","fchmod","chown","lchown","fchown","truncate","ftruncate","utime","created","ungotten","readFiles","isClosed","getdents","seeking","bytesWritten","munmap","ioctl","cmd","arg","readFile","encoding","buf","writeFile","actualNumBytes","ArrayBuffer","isView","chdir","createDefaultDirectories","createDefaultDevices","randomBuffer","randomLeft","randomByte","createDevice","createSpecialDirectories","proc_self","createStandardStreams","ensureErrnoError","setErrno","stack","staticInit","quit","findObject","dontResolveLastLink","analyzePath","exists","parentExists","parentPath","parentObject","createPath","reverse","part","createFile","properties","forceLoadFile","isDevice","isFolder","createLazyFile","LazyUint8Array","lengthKnown","chunks","chunkOffset","chunkSize","chunkNum","getter","setDataGetter","cacheLength","header","datalength","Number","getResponseHeader","hasByteServing","usesGzip","doXHR","setRequestHeader","overrideMimeType","lazyArray","_length","_chunkSize","writeChunks","fn","SYSCALLS","DEFAULT_POLLMASK","calculateAt","dirfd","allowEmpty","dirstream","getStreamFromFD","doStat","abs","floor","getTime","doMsync","addr","varargs","getp","getStr","doReadv","iov","iovcnt","curr","convertI32PairToI53Checked","lo","hi","NaN","doWritev","isLeapYear","year","arraySum","index","sum","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR","addDays","date","days","newDate","leap","getFullYear","currentMonth","getMonth","daysInCurrentMonth","getDate","setDate","setMonth","setFullYear","writeArrayToMemory","_strftime","s","maxsize","format","tm","tm_zone","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","pattern","EXPANSION_RULES_1","rule","RegExp","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","compare","sgn","getFirstWeekStartDate","janFourth","getDay","getWeekBasedYear","thisDate","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","substring","twelveHour","jan1","dec31","off","ahead","bytes","getCFunc","ident","stringToUTF8OnStack","stackAlloc","embind_init_charCodes","codes","other","leftClass","left","rightClass","right","clone","getPrototypeOf","k","getPointee","toType","rawPointer","makeDefaultHandle","registeredPointerRecord","constPointerType","pointerType","dp","has","createPreloadedFile","dontCreateFile","preFinish","processData","wasmImports","n","rawTupleType","reg","elements","elementsLength","elementTypes","elt","getterReturnType","setterArgumentType","getterContext","setter","setterContext","structType","fieldRecords","fields","field","fieldTypes","fieldName","w","primitiveType","minRange","maxRange","G","trueValue","falseValue","wt","h","rawPointerType","rawConstPointerType","baseClassRawType","getActualTypeSignature","upcastSignature","downcastSignature","destructorSignature","legalFunctionName","base","basePrototype","constructor_body","__derivedClasses","referenceConverter","pointerConverter","constPointerConverter","g","rawClassType","rawArgTypesAddr","invokerSignature","invoker","rawArgTypes","rawInvoker","context","isPureVirtual","unboundTypesHandler","Symbol","method","className","memberFunction","q","getterSignature","setterSignature","desc","enumerable","configurable","F","isSigned","ctor","values","rawEnumType","enumValue","enumType","Enum","Value","a","invokerArgsArray","j","fromWireType","bitshift","isUnsignedType","checkAssertions","toTypeName","dataTypeIndex","TA","typeMapping","decodeMemoryView","stdStringIsUTF8","payload","decodeStartPtr","currentBytePtr","maxRead","stringSegment","valueIsOfTypeString","Uint8ClampedArray","_malloc","charCode","charSize","decodeString","encodeString","getHeap","lengthBytesUTF","HEAP","maxReadBytes","constructorSignature","H","isVoid","I","J","E","dest","num","copyWithin","y","requestedSize","oldSize","maxHeapSize","alignUp","multiple","cutDown","overGrownHeapSize","z","__environ","environ_buf","bufSize","string","A","penviron_count","penviron_buf_size","B","D","pnum","offset_low","offset_high","newOffset","isNaN","C","loc","wasmExports","createWasm","receiveInstance","instantiateAsync","instantiateStreaming","a0","stackSave","stackRestore","run","preRun","addOnPreRun","setTimeout","doRun","postRun","addOnPostRun","a1","a2","a3","a4","a5","a6","a7","a8","a9","returnType","toC","cArgs","converter","Boolean","runCaller","ready","default"],"version":3,"file":"process.76e7e6d7.js.map"}